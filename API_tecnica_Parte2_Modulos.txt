---

## Módulos Principales y Endpoints

### Auth

Este módulo gestiona el registro de nuevos usuarios, el inicio de sesión, la recuperación de contraseñas y el cierre de sesión.

#### Modelos de Datos Asociados

1.  **`Usuario`**
    *   **Tabla SQL:** `usuario`
    *   **Campos Principales:**
        *   `idUsuario` (INTEGER, PK, autoIncrement, `id_usuario`)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `contrasena` (TEXT, allowNull: false)
        *   `idRol` (INTEGER, allowNull: false, FK a `rol`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`
        *   `hasMany(models.TokenRecuperacion, { foreignKey: 'idUsuario', as: 'tokensRecuperacion' })`

2.  **`TokenRecuperacion`**
    *   **Tabla SQL:** `token_recuperacion`
    *   **Campos Principales:**
        *   `idTokenRecuperacion` (INTEGER, PK, autoIncrement, `id_token_recuperacion`)
        *   `idUsuario` (INTEGER, allowNull: false, FK a `usuario`, onDelete: 'CASCADE')
        *   `token` (TEXT, allowNull: false, unique: true)
        *   `fechaExpiracion` (DATE, allowNull: false, `fecha_expiracion`)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuario' })`

#### Endpoints

1.  **Registrar Nuevo Usuario**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/registrar`
    *   **Descripción:** Registra un nuevo usuario, que por defecto se crea con el rol de "Cliente" y su perfil de cliente asociado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123",
          "nombre": "NombreUsuario",
          "apellido": "ApellidoUsuario",
          "telefono": "1234567890",
          "tipoDocumento": "CC", // Ej: CC, CE, Pasaporte
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email, único.
        *   Contraseña: obligatoria, mín. 8 caracteres.
        *   Nombre, Apellido, Teléfono, Tipo de Documento, Número de Documento, Fecha de Nacimiento: obligatorios, con validaciones de longitud y/o formato.
        *   Número de Documento: único para Clientes.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario registrado exitosamente. Por favor, inicia sesión.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña... */ },
                "token": "jwt_token_aqui" // Token para inicio de sesión inmediato opcional
              }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo ya existe, campos faltantes).
        *   `409 Conflict`: Si el correo o número de documento ya existe (manejado por validadores).

2.  **Iniciar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/login`
    *   **Descripción:** Autentica a un usuario y devuelve un token JWT.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
        *   Contraseña: obligatoria.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Inicio de sesión exitoso.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña, con info de rol... */ },
                "token": "jwt_token_aqui"
              }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Credenciales incorrectas.

3.  **Solicitar Recuperación de Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/solicitar-recuperacion`
    *   **Descripción:** Envía un correo electrónico al usuario con un enlace o token para restablecer su contraseña.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Si el correo electrónico está registrado, recibirás instrucciones para restablecer tu contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación.

4.  **Validar Token de Recuperación**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/validar-token-recuperacion`
    *   **Descripción:** Verifica si un token de recuperación es válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui"
        }
        ```
    *   **Validaciones:** El servicio valida la existencia y vigencia del token.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Token de recuperación válido."
            }
            ```
        *   `400 Bad Request` o `404 Not Found`: Token inválido o expirado.

5.  **Resetear Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/resetear-contrasena`
    *   **Descripción:** Establece una nueva contraseña para el usuario utilizando un token de recuperación válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui",
          "nuevaContrasena": "nuevaPassword123",
          "confirmarNuevaContrasena": "nuevaPassword123"
        }
        ```
    *   **Validaciones:**
        *   Token: obligatorio.
        *   Nueva Contraseña: obligatoria, mín. 8 caracteres.
        *   Confirmar Nueva Contraseña: debe coincidir con la nueva contraseña.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Contraseña actualizada exitosamente. Ya puedes iniciar sesión con tu nueva contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. contraseñas no coinciden, token inválido).
        *   `404 Not Found`: Token no encontrado o inválido.

6.  **Cerrar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/logout`
    *   **Descripción:** Invalida la sesión del servidor (si se usa `express-session`). Para JWT stateless, es principalmente una acción del lado del cliente (eliminar el token).
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Validaciones:** Ninguna específica.
    *   **Permisos Requeridos:** Puede requerir autenticación si se invalida una sesión activa del servidor.
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Sesión cerrada exitosamente." // o "Logout procesado (el cliente debe eliminar el token JWT)."
            }
            ```
        *   `500 Internal Server Error`: Si hay problemas al destruir la sesión del servidor.

### Rol

Este módulo se encarga de la gestión de roles de usuario y los permisos asociados a cada rol.

#### Modelo de Datos Asociado

1.  **`Rol`**
    *   **Tabla SQL:** `rol`
    *   **Campos Principales:**
        *   `idRol` (INTEGER, PK, autoIncrement, `id_rol`)
        *   `nombre` (STRING(50), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `hasMany(models.Usuario, { foreignKey: 'idRol', as: 'usuarios' })`
        *   `belongsToMany(models.Permisos, { through: 'permisos_x_rol', foreignKey: 'id_rol', otherKey: 'id_permiso', as: 'permisos' })`

#### Endpoints

1.  **Crear Nuevo Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Crea un nuevo rol en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre del Rol",
          "descripcion": "Descripción detallada del rol (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-100 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Rol creado exitosamente.",
              "data": { /* ...datos del rol creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, tipo de dato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

2.  **Listar Roles**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Obtiene una lista de todos los roles. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por roles activos (`true`) o inactivos (`false`).
    *   **Validaciones:** Ninguna específica para los parámetros de consulta más allá del tipo implícito.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de roles... */ ]
            }
            ```
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

3.  **Obtener Rol por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Obtiene un rol específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del rol... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

4.  **Actualizar Rol**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Actualiza un rol existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre del Rol", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-100 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol actualizado exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del rol ya existe.

5.  **Cambiar Estado de Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del rol ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

6.  **Anular Rol (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/anular`
    *   **Descripción:** Deshabilita un rol (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del rol actualizado con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

7.  **Habilitar Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/habilitar`
    *   **Descripción:** Habilita un rol (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol habilitado exitosamente.",
              "data": { /* ...datos del rol actualizado con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

8.  **Eliminar Rol Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Elimina físicamente un rol de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR` (o un permiso más específico y restrictivo si se define).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito, sin contenido en la respuesta.
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el rol no puede ser eliminado debido a restricciones (ej. usuarios asignados a este rol).

9.  **Listar Permisos de un Rol**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Obtiene la lista de permisos asociados a un rol específico.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos asociados al rol... */ ]
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

10. **Asignar Permisos a Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Asigna uno o más permisos a un rol. Si el rol ya tiene algunos de los permisos, no se duplican. Los permisos no incluidos en la solicitud no se eliminan.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2, 5] // Array de IDs de permisos a asignar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos asignados/actualizados para el rol ID X.",
              "data": { /* ...lista de todos los permisos del rol después de la asignación... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. IDs no válidos, array vacío).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol o alguno de los permisos no encontrado.

11. **Quitar Permisos de Rol**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Quita uno o más permisos de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2] // Array de IDs de permisos a quitar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos quitados del rol ID X.",
              "data": { /* ...lista de permisos restantes del rol... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

### Permisos

Este módulo administra los permisos individuales que pueden ser asignados a los roles. Los permisos definen acciones específicas que un usuario puede realizar en el sistema.

#### Modelo de Datos Asociado

1.  **`Permisos`**
    *   **Tabla SQL:** `permisos`
    *   **Campos Principales:**
        *   `idPermiso` (INTEGER, PK, autoIncrement, `id_permiso`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Rol, { through: 'permisos_x_rol', foreignKey: 'id_permiso', otherKey: 'id_rol', as: 'roles' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PERMISOS_GESTIONAR`.

1.  **Crear Nuevo Permiso**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Crea un nuevo permiso en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NOMBRE_DEL_PERMISO_EN_MAYUSCULAS",
          "descripcion": "Descripción detallada del permiso (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-150 caracteres, único. Usualmente en formato `MODULO_ENTIDAD_ACCION`.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Permiso creado exitosamente.",
              "data": { /* ...datos del permiso creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Permisos**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Obtiene una lista de todos los permisos. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por permisos activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Permiso por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Obtiene un permiso específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del permiso... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

4.  **Actualizar Permiso**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Actualiza un permiso existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NUEVO_NOMBRE_PERMISO", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-150 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso actualizado exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del permiso ya existe.

5.  **Cambiar Estado de Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un permiso.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del permiso ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

6.  **Anular Permiso (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/anular`
    *   **Descripción:** Deshabilita un permiso (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del permiso con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

7.  **Habilitar Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/habilitar`
    *   **Descripción:** Habilita un permiso (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso habilitado exitosamente.",
              "data": { /* ...datos del permiso con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

8.  **Eliminar Permiso Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Elimina físicamente un permiso de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el permiso no puede ser eliminado (ej. está asignado a roles).

### Usuario

Este módulo es responsable de la gestión general de las cuentas de usuario, incluyendo su creación (que puede implicar la creación de un perfil de Cliente o Empleado asociado), listado, detalle, actualización y cambios de estado. La creación de usuarios a través de `/api/auth/registrar` está orientada al auto-registro de Clientes, mientras que este módulo permite a los administradores gestionar todos los tipos de usuarios.

#### Modelo de Datos Asociado

1.  **`Usuario`** (Ver descripción detallada en la sección `Auth > Modelos de Datos Asociados`)
    *   **Tabla SQL:** `usuario`
    *   **Relaciones Clave para este Módulo:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_USUARIOS_GESTIONAR`.

1.  **Crear Nuevo Usuario (Administrativo)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Crea un nuevo usuario en el sistema, permitiendo especificar el rol y los datos del perfil asociado (Cliente o Empleado). El servicio se encarga de crear el perfil correspondiente según el `idRol` proporcionado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "nuevo.usuario@example.com",
          "contrasena": "passwordSeguro123",
          "idRol": 2, // ID del Rol (ej. 1 para Admin, 2 para Cliente, 3 para Empleado)
          "estado": true, // Opcional, por defecto true
          // Campos de perfil (dependiendo del rol, algunos serán obligatorios a nivel de servicio)
          "nombre": "NombrePerfil",
          "apellido": "ApellidoPerfil",
          "telefono": "0987654321",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: 'Cédula de Ciudadanía', 'Pasaporte', etc.
          "numeroDocumento": "987654321",
          "fechaNacimiento": "YYYY-MM-DD", // Para Cliente
          // Campos específicos de Empleado (si el idRol corresponde a un Empleado)
          "fechaContratacion": "YYYY-MM-DD",
          "salario": 50000.00,
          "cargo": "Puesto del Empleado"
        }
        ```
    *   **Validaciones:**
        *   `correo`: obligatorio, email, único.
        *   `contrasena`: obligatoria, mín. 8 caracteres.
        *   `idRol`: obligatorio, entero positivo, debe existir un Rol activo con ese ID.
        *   `estado`: opcional, boolean.
        *   Campos de perfil (`nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento`): opcionales a nivel de validador de ruta, pero el servicio puede requerirlos según el rol. `numeroDocumento` se valida como único dentro de Clientes o Empleados respectivamente.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario creado exitosamente.",
              "data": { /* ...datos del usuario creado, incluyendo perfil si aplica... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo duplicado, rol no existe, campos de perfil inválidos).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Usuarios**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Obtiene una lista de todos los usuarios. Permite filtrar por estado y por `idRol`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por usuarios activos (`true`) o inactivos (`false`).
        *   `idRol` (INTEGER, opcional): Filtrar por ID de Rol.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de usuarios, usualmente con información básica y de rol... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Usuario por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Obtiene un usuario específico por su ID, incluyendo su información de rol y perfil asociado (Cliente o Empleado).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del usuario, rol, y perfil (clienteInfo o empleadoInfo)... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

4.  **Actualizar Usuario**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Actualiza un usuario existente por su ID. Permite actualizar correo, contraseña (si se provee), rol, estado y campos del perfil asociado. Si `contrasena` se envía vacía, se ignora (no se actualiza).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario.actualizado@example.com", // Opcional
          "contrasena": "nuevaPassword123", // Opcional, si no se envía o es "", no se actualiza
          "idRol": 2, // Opcional
          "estado": true, // Opcional
          // Campos de perfil a actualizar
          "nombre": "Nombre Actualizado",
          // ...otros campos de perfil...
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `correo`: opcional, email, único (excepto para el propio usuario).
        *   `contrasena`: opcional, mín. 8 caracteres si se provee.
        *   `idRol`: opcional, entero positivo, debe existir un Rol activo.
        *   `estado`: opcional, boolean.
        *   Campos de perfil: opcionales, con validaciones similares a la creación. `numeroDocumento` se valida como único (excepto para el propio usuario).
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario actualizado exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el nuevo correo o número de documento ya existe para otro usuario/perfil.

5.  **Cambiar Estado de Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un usuario.
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del usuario ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

6.  **Anular Usuario (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/anular`
    *   **Descripción:** Deshabilita un usuario (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del usuario con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

7.  **Habilitar Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/habilitar`
    *   **Descripción:** Habilita un usuario (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario habilitado exitosamente.",
              "data": { /* ...datos del usuario con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

8.  **Eliminar Usuario Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Elimina físicamente un usuario y sus perfiles asociados (Cliente/Empleado) de la base de datos. ¡Usar con extrema precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR` (o un permiso más específico y restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el usuario no puede ser eliminado debido a otras dependencias (ej. transacciones activas, etc., aunque el `onDelete: CASCADE` en perfiles debería manejarlos).

### Estado

Este módulo gestiona los diferentes estados que pueden tener entidades como Ventas o Citas (ej. "Pendiente", "Confirmado", "En Proceso", "Completado", "Cancelado").

#### Modelo de Datos Asociado

1.  **`Estado`**
    *   **Tabla SQL:** `estado`
    *   **Campos Principales:**
        *   `idEstado` (INTEGER, PK, autoIncrement, `id_estado`)
        *   `nombreEstado` (STRING(45), allowNull: false, unique: true, `nombre_estado`)
    *   **Relaciones Principales:**
        *   `hasMany(models.Venta, { foreignKey: 'idEstado', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEstado', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo, por defecto, requieren el permiso `MODULO_ESTADOS_GESTIONAR`. La ruta GET para listar todos los estados podría tener permisos más flexibles si se considera que esta información es menos sensible.

1.  **Crear Nuevo Estado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Crea un nuevo tipo de estado en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nombre del Estado" // Ej: "Pendiente de Pago", "Confirmada", "Cancelada por Cliente"
        }
        ```
    *   **Validaciones:**
        *   `nombreEstado`: obligatorio, string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Estado creado exitosamente.",
              "data": { /* ...datos del estado creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, formato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Estados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Obtiene una lista de todos los estados disponibles.
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso de lectura más general).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de estados... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Estado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Obtiene un estado específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del estado... */ }
            }
            ```
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.

4.  **Actualizar Estado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Actualiza un estado existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nuevo Nombre del Estado"
        }
        ```
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
        *   `nombreEstado`: opcional (si se envía, no puede estar vacío), string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado actualizado exitosamente.",
              "data": { /* ...datos del estado actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el nuevo `nombreEstado` ya existe.

5.  **Eliminar Estado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Elimina físicamente un estado de la base de datos. Esta acción fallará si el estado está siendo utilizado por alguna Venta o Cita.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el estado está en uso y no puede ser eliminado.

### Cliente

Este módulo se encarga de la gestión de los perfiles de cliente. Cada cliente está asociado a una cuenta de usuario (`Usuario`) que maneja la autenticación. Las operaciones de este módulo se centran en la información específica del perfil del cliente.

#### Modelo de Datos Asociado

1.  **`Cliente`**
    *   **Tabla SQL:** `cliente`
    *   **Campos Principales:**
        *   `idCliente` (INTEGER, PK, autoIncrement, `id_cliente`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Cliente.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuarioCuenta' })`
        *   `hasMany(models.Venta, { foreignKey: 'idCliente', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idCliente', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CLIENTES_GESTIONAR`.

1.  **Crear Nuevo Cliente (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Crea un nuevo perfil de cliente y, simultáneamente, una nueva cuenta de usuario (`Usuario`) para ese cliente. El rol por defecto para el usuario creado es "Cliente".
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente
          "nombre": "Nombre Cliente",
          "apellido": "Apellido Cliente",
          "telefono": "1234567890",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: "Cédula de Extranjería", "Pasaporte"
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": true, // Opcional, estado del perfil Cliente (por defecto true)
          // Campos para la Cuenta de Usuario
          "correo": "cliente@example.com", // Usado para Cliente.correo y Usuario.correo
          "contrasena": "passwordSeguro123",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (por defecto true)
        }
        ```
    *   **Validaciones:**
        *   Perfil Cliente: `nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` debe ser único en la tabla `cliente`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en las tablas `usuario` y `cliente`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Cliente creado exitosamente.",
              "data": { /* ...datos del cliente creado y su usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. `numeroDocumento` o `correo` duplicado, campos faltantes).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Clientes**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de cliente. Permite filtrar por `estado` del perfil del cliente.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por clientes activos (`true`) o inactivos (`false`) según el campo `estado` del modelo Cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de clientes, incluyendo información de su cuenta de usuario asociada... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Cliente por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Obtiene un perfil de cliente específico por su `idCliente`, incluyendo la información de la cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del cliente y su cuenta de usuario asociada... */ }
            }
            ```
        *   `400 Bad Request`: ID de cliente inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

4.  **Actualizar Cliente**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Actualiza un perfil de cliente existente y, opcionalmente, el correo o estado de su cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente (todos opcionales)
          "nombre": "Nombre Actualizado",
          "apellido": "Apellido Actualizado",
          "telefono": "1122334455",
          "tipoDocumento": "Pasaporte",
          "numeroDocumento": "AB123456",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": false, // Estado del perfil del Cliente
          // Campos de la Cuenta de Usuario (todos opcionales)
          "correo": "nuevo.correo@example.com", // Si se actualiza, debe ser único
          "estadoUsuario": false, // Estado de la cuenta Usuario
          "idUsuario": null // Opcional: permite desvincular (null) o re-vincular un idUsuario existente y no asociado
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   Campos de perfil: opcionales, pero si se proveen, deben cumplir sus reglas (ej. `numeroDocumento` único si cambia).
        *   `correo`: opcional, si se provee debe ser email válido y único en `usuario` y `cliente` (excluyendo el registro actual).
        *   `idUsuario`: opcional, si se provee como entero debe ser un `idUsuario` válido y no asociado a otro cliente. Si es `null`, desvincula el usuario actual (si la lógica de servicio lo permite).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente actualizado exitosamente.",
              "data": { /* ...datos del cliente y usuario actualizados... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente o `idUsuario` (si se intenta re-vincular) no encontrado.
        *   `409 Conflict`: Si `numeroDocumento` o `correo` duplicado.

5.  **Cambiar Estado de Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/estado`
    *   **Descripción:** Cambia el estado del perfil de un cliente (campo `estado` en el modelo `Cliente`). Esto no afecta directamente el estado de la cuenta de `Usuario` asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true, para el perfil del Cliente
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del cliente ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del cliente actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

6.  **Anular Cliente (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/anular`
    *   **Descripción:** Deshabilita el perfil de un cliente (establece `estado = false` en `Cliente`).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del cliente con estado false... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

7.  **Habilitar Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/habilitar`
    *   **Descripción:** Habilita el perfil de un cliente (establece `estado = true` en `Cliente`).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente habilitado exitosamente.",
              "data": { /* ...datos del cliente con estado true... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

8.  **Eliminar Cliente Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Elimina físicamente un perfil de cliente. La cuenta de `Usuario` asociada NO se elimina automáticamente debido a la restricción `onDelete: 'RESTRICT'`. Se debe gestionar la eliminación del usuario por separado si es necesario, o cambiar la política de integridad.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`: Si hay otras dependencias que impiden la eliminación (ej. Ventas, Citas asociadas que no tienen `onDelete: CASCADE` o `SET NULL` para `idCliente`).

### Empleado

Este módulo gestiona los perfiles de los empleados. Similar a los clientes, cada empleado está asociado a una cuenta de usuario (`Usuario`) para la autenticación. Este módulo maneja la información específica del perfil del empleado y sus especialidades.

#### Modelo de Datos Asociado

1.  **`Empleado`**
    *   **Tabla SQL:** `empleado`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, autoIncrement, `id_empleado`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Empleado.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'cuentaUsuario' })`
        *   `belongsToMany(models.Especialidad, { through: 'empleado_especialidad', foreignKey: 'id_empleado', otherKey: 'id_especialidad', as: 'especialidades' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEmpleado', as: 'citasAtendidas' })`
        *   `hasMany(models.Abastecimiento, { foreignKey: 'idEmpleadoAsignado', as: 'abastecimientosAsignados' })`
        *   `hasMany(models.Novedades, { foreignKey: 'idEmpleado', as: 'novedadesHorario' })`

2.  **`EmpleadoEspecialidad`** (Tabla de Unión)
    *   **Tabla SQL:** `empleado_especialidad`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, FK a `empleado`)
        *   `idEspecialidad` (INTEGER, PK, FK a `especialidad`)
    *   **Relaciones:**
        *   `belongsTo(models.Empleado, { foreignKey: 'idEmpleado' })`
        *   `belongsTo(models.Especialidad, { foreignKey: 'idEspecialidad' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_EMPLEADOS_GESTIONAR`.

1.  **Crear Nuevo Empleado (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Crea un nuevo perfil de empleado y una cuenta de usuario asociada. El rol de la cuenta de usuario creada debería ser uno apropiado para empleados.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Empleado
          "nombre": "Nombre Empleado",
          "apellido": "Apellido Empleado",
          "telefono": "2345678901",
          "tipoDocumento": "Cédula de Ciudadanía",
          "numeroDocumento": "234567890",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoEmpleado": true, // Opcional, estado del perfil Empleado (def: true)
          // Campos para la Cuenta de Usuario
          "correo": "empleado@example.com", // Usado para Empleado.correo y Usuario.correo
          "contrasena": "passwordFuerte456",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (def: true)
          // "idRol" para el usuario se gestiona en el servicio, asignando un rol de empleado.
        }
        ```
    *   **Validaciones:**
        *   Perfil Empleado: `nombre`, `apellido`, `correo`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` y `correo` deben ser únicos en la tabla `empleado`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en la tabla `usuario`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Empleado creado exitosamente.",
              "data": { /* ...datos del empleado y usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Empleados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de empleado. Permite filtrar por `estado` del perfil.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por empleados activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de empleados... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Empleado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Obtiene un perfil de empleado por `idEmpleado`, incluyendo cuenta de usuario y especialidades.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos del empleado, usuario y especialidades... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Empleado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Actualiza un perfil de empleado y, opcionalmente, el correo/estado de su cuenta de usuario.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales similares a la creación, ej. `nombre`, `apellido`, `correo`, `telefono`, `estadoEmpleado`, `estadoUsuario`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Empleado actualizado.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`.

5.  **Cambiar Estado de Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/estado`
    *   **Descripción:** Cambia el estado del perfil de un empleado.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado del empleado cambiado.", "data": { /* ...empleado actualizado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Empleado (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/anular`
    *   **Descripción:** Establece `estado = false` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/habilitar`
    *   **Descripción:** Establece `estado = true` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Empleado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Elimina el perfil del empleado. La cuenta de `Usuario` no se elimina (por `onDelete: 'RESTRICT'`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `401`, `403`, `404`, `409`.

9.  **Listar Especialidades de Empleado**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Obtiene todas las especialidades asociadas a un empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

10. **Asignar Especialidades a Empleado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Asigna una o más especialidades a un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2, 3] // Array de IDs de especialidades
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades asignadas.", "data": { /* ...especialidades actualizadas del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado o alguna Especialidad no encontrada).

11. **Quitar Especialidades de Empleado**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Quita una o más especialidades de un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2] // Array de IDs de especialidades a quitar
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades quitadas.", "data": { /* ...especialidades restantes del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

### Especialidad

Este módulo gestiona las especialidades que pueden ser asignadas a los empleados y que también pueden estar asociadas a los servicios ofrecidos.

#### Modelo de Datos Asociado

1.  **`Especialidad`**
    *   **Tabla SQL:** `especialidad`
    *   **Campos Principales:**
        *   `idEspecialidad` (INTEGER, PK, autoIncrement, `id_especialidad`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Empleado, { through: 'empleado_especialidad', foreignKey: 'id_especialidad', otherKey: 'id_empleado', as: 'empleados' })`
        *   `hasMany(models.Servicio, { foreignKey: 'idEspecialidad', as: 'servicios' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_ESPECIALIDADES_GESTIONAR`.

1.  **Crear Nueva Especialidad**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Crea una nueva especialidad en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre de la Especialidad", // Ej: "Cardiología", "Estilista Canino"
          "descripcion": "Descripción detallada de la especialidad (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Especialidad creada exitosamente.",
              "data": { /* ...datos de la especialidad creada... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Especialidades**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Obtiene una lista de todas las especialidades. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por especialidades activas (`true`) o inactivas (`false`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Especialidad por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Obtiene una especialidad específica por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos de la especialidad... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Especialidad**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Actualiza una especialidad existente por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre Especialidad", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:** Campos opcionales, pero si se proveen deben cumplir las reglas (ej. `nombre` único y longitud).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidad actualizada.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si `nombre` duplicado).

5.  **Cambiar Estado de Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de una especialidad.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado de la especialidad cambiado.", "data": { /* ...especialidad actualizada... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Especialidad (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/anular`
    *   **Descripción:** Establece `estado = false` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/habilitar`
    *   **Descripción:** Establece `estado = true` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Especialidad Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Elimina físicamente una especialidad. El servicio debe verificar que no esté en uso por Empleados o Servicios.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `204 No Content`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si está en uso).

### Proveedor

Este módulo se encarga de la gestión de proveedores de productos o servicios para la empresa.

#### Modelo de Datos Asociado

1.  **`Proveedor`**
    *   **Tabla SQL:** `proveedor`
    *   **Campos Principales:**
        *   `idProveedor` (INTEGER, PK, autoIncrement, `id_proveedor`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `tipo` (STRING(50), allowNull: false) - Ej: "Natural", "Jurídico".
        *   `tipoDocumento` (STRING(50), allowNull: true, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: true, `numero_documento`)
        *   `nitEmpresa` (STRING(45), allowNull: true, unique: true, `nit_empresa`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `direccion` (TEXT, allowNull: false)
        *   `nombrePersonaEncargada` (STRING(100), allowNull: true, `nombre_persona_encargada`)
        *   `telefonoPersonaEncargada` (STRING(20), allowNull: true, `telefono_persona_encargada`)
        *   `emailPersonaEncargada` (STRING(100), allowNull: true, `validate: { isEmail: true }`, `email_persona_encargada`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Índices:**
        *   Unique en (`nombre`, `tipo`)
    *   **Relaciones Principales:**
        *   `hasMany(models.Compra, { foreignKey: 'idProveedor', as: 'compras' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PROVEEDORES_GESTIONAR`.

1.  **Crear Nuevo Proveedor**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/proveedores/`
    *   **Descripción:** Crea un nuevo proveedor en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre del Proveedor S.A.S.",
          "tipo": "Jurídico", // o "Natural"
          "telefono": "3001234567",
          "correo": "contacto@proveedor.com",
          "direccion": "Calle Falsa 123, Ciudad",
          "tipoDocumento": "NIT", // Opcional si es "Natural", ej: "Cédula de Ciudadanía"
          "numeroDocumento": null, // Opcional si es "Jurídico"
          "nitEmpresa": "900123456-7", // Opcional si es "Natural", único
          "nombrePersonaEncargada": "Juan Encargado (opcional)",
          "telefonoPersonaEncargada": "3109876543 (opcional)",
          "emailPersonaEncargada": "juan.encargado@proveedor.com (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`, `tipo`, `telefono`, `correo`, `direccion` son obligatorios.
        *   `correo` y `nitEmpresa` (si se proporciona) deben ser únicos.
        *   Los campos de persona encargada son opcionales.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Proveedor creado.", "data": { /* ...datos del proveedor... */ }}`
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `409 Conflict` (si `correo` o `nitEmpresa` ya existen).

2.  **Listar Proveedores**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/proveedores/`
    *   **Descripción:** Obtiene una lista de proveedores. Permite filtrar por `estado` y `tipo`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por proveedores activos (`true`) o inactivos (`false`).
        *   `tipo` (STRING, opcional): Filtrar por tipo de proveedor (ej. "Natural", "Jurídico").
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de proveedores... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Proveedor por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Obtiene un proveedor por su ID.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos del proveedor... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Proveedor**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Actualiza un proveedor por su ID.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales similares a la creación).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Proveedor actualizado.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`.

5.  **Cambiar Estado de Proveedor**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un proveedor.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado del proveedor cambiado.", "data": { /* ...proveedor actualizado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Proveedor (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/anular`
    *   **Descripción:** Establece `estado = false` para un proveedor.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Proveedor**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/habilitar`
    *   **Descripción:** Establece `estado = true` para un proveedor.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Proveedor Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Elimina físicamente un proveedor. El servicio debe verificar que no esté en uso (ej. en Compras).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `204 No Content`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si está en uso).

### CategoriaProducto

Este módulo administra las categorías para los productos, permitiendo agruparlos y definir propiedades comunes como la vida útil y el tipo de uso.

#### Modelo de Datos Asociado

1.  **`CategoriaProducto`**
    *   **Tabla SQL:** `categoria_producto`
    *   **Campos Principales:**
        *   `idCategoriaProducto` (INTEGER, PK, autoIncrement, `id_categoria_producto`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
        *   `vidaUtilDias` (INTEGER, allowNull: true, `vida_util_dias`) - Vida útil estimada en días.
        *   `tipoUso` (STRING(10), allowNull: false, `validate: { isIn: [["Interno", "Externo"]] }`) - Define si el producto es para uso "Interno" (consumido en la empresa) o "Externo" (para la venta).
    *   **Relaciones Principales:**
        *   `hasMany(models.Producto, { foreignKey: 'categoriaProductoId', as: 'productos' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.

1.  **Crear Nueva Categoría de Producto**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/categorias-producto/`
    *   **Descripción:** Crea una nueva categoría para productos.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Shampoos Caninos",
          "descripcion": "Categoría para shampoos de uso veterinario en caninos (opcional)",
          "vidaUtilDias": 730, // Opcional
          "tipoUso": "Externo", // "Interno" o "Externo"
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 45 caracteres (revisar si el modelo es TEXT y el validador es 45).
        *   `vidaUtilDias`: opcional, entero no negativo.
        *   `tipoUso`: obligatorio, debe ser "Interno" o "Externo".
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Categoría de producto creada.", "data": { /* ...datos... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `409 Conflict`.

2.  **Listar Categorías de Producto**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-producto/`
    *   **Descripción:** Obtiene una lista de categorías de producto. Permite filtrar por `estado` y `tipoUso`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
        *   `tipoUso` (STRING, opcional): "Interno" o "Externo".
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Categoría de Producto por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Categoría de Producto**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`, `409`.

5.  **Cambiar Estado de Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/estado`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}`.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/anular`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/habilitar`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Categoría de Producto Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Descripción:** Elimina físicamente. El servicio debe validar que no esté en uso por Productos.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`, `409`.

---

### CategoriaServicio

Este módulo administra las categorías para los servicios ofrecidos por la empresa.

#### Modelo de Datos Asociado

1.  **`CategoriaServicio`**
    *   **Tabla SQL:** `categoria_servicio`
    *   **Campos Principales:**
        *   `idCategoriaServicio` (INTEGER, PK, autoIncrement, `id_categoria_servicio`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `hasMany(models.Servicio, { foreignKey: 'idCategoriaServicio', as: 'servicios' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.

1.  **Crear Nueva Categoría de Servicio**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/categorias-servicio/`
    *   **Descripción:** Crea una nueva categoría para servicios.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Peluquería Canina",
          "descripcion": "Servicios de estética y peluquería para perros (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 45 caracteres (revisar si el modelo es TEXT y el validador es 45).
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Categoría de servicio creada.", "data": { /* ...datos... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `409 Conflict`.

2.  **Listar Categorías de Servicio**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-servicio/`
    *   **Descripción:** Obtiene una lista de categorías de servicio. Permite filtrar por `estado`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Categoría de Servicio por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Categoría de Servicio**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`, `409`.

5.  **Cambiar Estado de Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/estado`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}`.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/anular`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/habilitar`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Categoría de Servicio Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Descripción:** Elimina físicamente. El servicio debe validar que no esté en uso por Servicios.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`, `409`.

### Producto

Este módulo gestiona los productos de la empresa, incluyendo detalles de inventario, precios y categorización.

#### Modelo de Datos Asociado

1.  **`Producto`**
    *   **Tabla SQL:** `producto`
    *   **Campos Principales:**
        *   `idProducto` (INTEGER, PK, autoIncrement, `id_producto`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `descripcion` (TEXT, allowNull: true)
        *   `existencia` (INTEGER, defaultValue: 0, `validate: { min: 0 }`) - Cantidad actual en stock.
        *   `precio` (DECIMAL(12, 2), defaultValue: 0.00)
        *   `stockMinimo` (INTEGER, defaultValue: 0, `stock_minimo`)
        *   `stockMaximo` (INTEGER, defaultValue: 0, `stock_maximo`)
        *   `imagen` (TEXT, allowNull: true) - URL o path a la imagen del producto.
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
        *   `categoriaProductoId` (INTEGER, allowNull: true, FK a `categoria_producto`, `id_categoria_producto`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.CategoriaProducto, { foreignKey: 'categoriaProductoId', as: 'categoria' })`
        *   `belongsToMany(models.Compra, { through: 'compra_x_producto', foreignKey: 'id_producto', otherKey: 'id_compra', as: 'compras' })`
        *   `belongsToMany(models.Venta, { through: 'producto_x_venta', foreignKey: 'id_producto', otherKey: 'id_venta', as: 'ventas' })`
        *   `hasMany(models.Abastecimiento, { foreignKey: 'idProducto', as: 'abastecimientos' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PRODUCTOS_GESTIONAR`.

1.  **Crear Nuevo Producto**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/productos/`
    *   **Descripción:** Crea un nuevo producto en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Producto Ejemplo",
          "descripcion": "Descripción detallada del producto (opcional)",
          "existencia": 100, // Opcional, default 0
          "precio": 19.99, // Opcional, default 0.00
          "stockMinimo": 10, // Opcional, default 0
          "stockMaximo": 200, // Opcional, default 0
          "imagen": "https://example.com/imagen.jpg", // Opcional, URL válida
          "estado": true, // Opcional, default true
          "categoriaProductoId": 1 // Opcional, ID de una CategoriaProducto activa existente
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres.
        *   `existencia`, `stockMinimo`, `stockMaximo`: opcionales, enteros no negativos. `stockMaximo` >= `stockMinimo`.
        *   `precio`: opcional, número no negativo.
        *   `imagen`: opcional, URL válida.
        *   `categoriaProductoId`: opcional, si se provee debe ser ID de una `CategoriaProducto` activa.
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Producto creado.", "data": { /* ...datos del producto... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`.

2.  **Listar Productos**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/productos/`
    *   **Descripción:** Obtiene una lista de productos. Permite filtrar por `estado`, `categoriaProductoId`, `tipoUso` (de la categoría) y `busqueda` (en nombre o descripción). Por defecto, lista productos activos.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): `true` para activos, `false` para inactivos. Si no se envía, por defecto es `true`.
        *   `categoriaProductoId` (INTEGER, opcional): ID de la categoría de producto.
        *   `tipoUso` (STRING, opcional): "Interno" o "Externo" (filtra por el tipo de uso de la categoría).
        *   `busqueda` (STRING, opcional): Término a buscar en nombre y descripción del producto.
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Producto por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/productos/:idProducto`
    *   **Parámetros de Solicitud (`params`):** `idProducto` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Producto**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/productos/:idProducto`
    *   **Parámetros de Solicitud (`params`):** `idProducto` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación).
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`, `409`.

5.  **Cambiar Estado de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/productos/:idProducto/estado`
    *   **Parámetros de Solicitud (`params`):** `idProducto` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}`.
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/productos/:idProducto/anular`
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/productos/:idProducto/habilitar`
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Producto Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/productos/:idProducto`
    *   **Descripción:** Elimina físicamente. El servicio debe verificar que no esté en uso (ej. en Compras, Ventas, Abastecimientos).
    *   **Permisos Requeridos:** `MODULO_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`, `409`.

---

### Compra

Este módulo gestiona las compras de productos a proveedores, incluyendo el registro de los productos adquiridos, cantidades, costos y el manejo del inventario.

#### Modelo de Datos Asociado

1.  **`Compra`**
    *   **Tabla SQL:** `compra`
    *   **Campos Principales:**
        *   `idCompra` (INTEGER, PK, autoIncrement, `id_compra`)
        *   `fecha` (DATEONLY, defaultValue: DataTypes.NOW) - Fecha de la compra.
        *   `total` (DECIMAL(12, 2), defaultValue: 0.00) - Total monetario de la compra.
        *   `iva` (DECIMAL(12, 2), defaultValue: 0.00) - IVA total de la compra.
        *   `idProveedor` (INTEGER, allowNull: true, FK a `proveedor`, onDelete: 'RESTRICT')
        *   `idDashboard` (INTEGER, allowNull: true, FK a `dashboard`, onDelete: 'SET NULL') - Opcionalmente asociada a un dashboard.
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - `true` para activa/confirmada, `false` para anulada.
    *   **Relaciones Principales:**
        *   `belongsTo(models.Proveedor, { foreignKey: 'idProveedor', as: 'proveedor' })`
        *   `belongsTo(models.Dashboard, { foreignKey: 'idDashboard', as: 'dashboard' })`
        *   `belongsToMany(models.Producto, { through: 'compra_x_producto', foreignKey: 'id_compra',     otherKey: 'id_producto',     as: 'productos' })`

2.  **`CompraXProducto`** (Detalle de la Compra)
    *   **Tabla SQL:** `compra_x_producto`
    *   **Campos Principales:**
        *   `idCompraXProducto` (INTEGER, PK, autoIncrement, `id_compra_x_producto`)
        *   `cantidad` (INTEGER, defaultValue: 1)
        *   `valorUnitario` (DECIMAL(12, 2), defaultValue: 0.00, `valor_unitario`)
        *   `idCompra` (INTEGER, allowNull: false, FK a `compra`, onDelete: 'CASCADE')
        *   `idProducto` (INTEGER, allowNull: false, FK a `producto`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Compra, { foreignKey: 'idCompra', as: 'compra' })`
        *   `belongsTo(models.Producto, { foreignKey: 'idProducto', as: 'producto' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_COMPRAS_GESTIONAR`.

1.  **Crear Nueva Compra**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/compras/`
    *   **Descripción:** Registra una nueva compra. El servicio calcula el `total` e `iva` basados en los productos y actualiza el stock de los productos si la compra se crea en estado activo.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "fecha": "YYYY-MM-DD", // Opcional, por defecto fecha actual
          "proveedorId": 1, // ID de un Proveedor activo
          "dashboardId": null, // Opcional, ID de un Dashboard existente
          "estado": true, // Opcional, por defecto true. Si es true, afecta inventario.
          "total": 150.00, // Opcional, el servicio puede calcularlo.
          "iva": 23.96,    // Opcional, el servicio puede calcularlo.
          "productos": [
            {
              "productoId": 1, // ID de un Producto existente
              "cantidad": 10,
              "valorUnitario": 12.00
            },
            {
              "productoId": 2,
              "cantidad": 5,
              "valorUnitario": 6.00
            }
          ]
        }
        ```
    *   **Validaciones:**
        *   `proveedorId`: obligatorio, debe ser un Proveedor activo.
        *   `dashboardId`: opcional, si se provee, debe existir.
        *   `productos`: array obligatorio, al menos un producto. Cada ítem debe tener `productoId` (Producto existente y activo), `cantidad` (entero > 0), `valorUnitario` (número >= 0).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Compra creada.", "data": { /* ...datos de la compra y sus detalles... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found` (si Proveedor o Producto no existen).

2.  **Listar Compras**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/compras/`
    *   **Descripción:** Obtiene una lista de compras. Permite filtrar por `estado`, `proveedorId`, `dashboardId`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
        *   `proveedorId` (INTEGER, opcional).
        *   `dashboardId` (INTEGER, opcional).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Compra por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/compras/:idCompra`
    *   **Descripción:** Obtiene los detalles de una compra, incluyendo productos asociados, proveedor y dashboard.
    *   **Parámetros de Solicitud (`params`):** `idCompra` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Compra (Cabecera/Estado)**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/compras/:idCompra`
    *   **Descripción:** Actualiza campos de la cabecera de la compra (ej. `fecha`, `proveedorId`, `dashboardId`, `estado`). **No permite modificar los productos de la compra**. Si se cambia el `estado` (ej. de anulada a activa o viceversa), el servicio debe ajustar el inventario.
    *   **Parámetros de Solicitud (`params`):** `idCompra` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "fecha": "YYYY-MM-DD", // Opcional
          "proveedorId": 2, // Opcional
          "dashboardId": 1, // Opcional, puede ser null
          "estado": true // Opcional
        }
        ```
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

5.  **Cambiar Estado de Compra**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/compras/:idCompra/estado`
    *   **Descripción:** Cambia específicamente el estado booleano de una compra. El servicio ajusta el inventario según el cambio de estado (si pasa de anulada a activa, incrementa stock; si pasa de activa a anulada, decrementa stock).
    *   **Parámetros de Solicitud (`params`):** `idCompra` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado de la compra cambiado. Inventario ajustado si aplica.", "data": { /* ...compra actualizada... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found`.

6.  **Anular Compra**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/compras/:idCompra/anular`
    *   **Descripción:** Establece `estado = false` para una compra y revierte el efecto de la compra en el inventario de los productos asociados (decrementa stock).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Compra (Re-activar)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/compras/:idCompra/habilitar`
    *   **Descripción:** Establece `estado = true` para una compra previamente anulada y ajusta el inventario de los productos (incrementa stock).
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Compra Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/compras/:idCompra`
    *   **Descripción:** Elimina físicamente una compra y sus detalles (`CompraXProducto` por `onDelete: CASCADE`). **Importante:** Esta operación NO revierte el stock de los productos. Se recomienda anular la compra si se necesita ajustar inventario.
    *   **Permisos Requeridos:** `MODULO_COMPRAS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`.

---

### Venta

Este módulo gestiona las ventas de productos y/o servicios a los clientes. Incluye el registro de los ítems vendidos, cálculo de totales, manejo de estados de la venta (tanto del proceso como del registro en sí) y la afectación del inventario de productos.

#### Modelos de Datos Asociados

1.  **`Venta`**
    *   **Tabla SQL:** `venta`
    *   **Campos Principales:**
        *   `idVenta` (INTEGER, PK, autoIncrement, `id_venta`)
        *   `fecha` (DATEONLY, defaultValue: NOW) - Fecha de la venta.
        *   `total` (DECIMAL(12, 2), defaultValue: 0.00) - Calculado por el sistema.
        *   `iva` (DECIMAL(12, 2), defaultValue: 0.00) - Calculado por el sistema.
        *   `idCliente` (INTEGER, allowNull: true, FK a `cliente`, onDelete: 'RESTRICT') - Cliente asociado (puede ser null para ventas genéricas).
        *   `idDashboard` (INTEGER, allowNull: true, FK a `dashboard`, onDelete: 'SET NULL') - Opcionalmente asociada a un dashboard.
        *   `idEstado` (INTEGER, allowNull: false, FK a `estado`, onDelete: 'RESTRICT') - Estado del proceso de la venta (ej. "Pagada", "Pendiente Envio", "Completada").
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado general del registro de venta (`true` activa, `false` anulada). La anulación revierte stock.
    *   **Relaciones Principales:**
        *   `belongsTo(models.Cliente, { foreignKey: 'idCliente', as: 'cliente' })`
        *   `belongsTo(models.Dashboard, { foreignKey: 'idDashboard', as: 'dashboard' })`
        *   `belongsTo(models.Estado, { foreignKey: 'idEstado', as: 'estadoDetalle' })`
        *   `belongsToMany(models.Producto, { through: 'producto_x_venta', foreignKey: 'id_venta', otherKey: 'id_producto', as: 'productos' })`
        *   `belongsToMany(models.Servicio, { through: 'venta_x_servicio', foreignKey: 'id_venta', otherKey: 'id_servicio', as: 'servicios' })`

2.  **`ProductoXVenta`** (Detalle de Productos Vendidos)
    *   **Tabla SQL:** `producto_x_venta`
    *   **Campos Principales:**
        *   `idProductoXVenta` (INTEGER, PK, autoIncrement)
        *   `cantidad` (INTEGER, defaultValue: 1)
        *   `valorUnitario` (DECIMAL(12, 2), defaultValue: 0.00) - Precio del producto al momento de la venta.
        *   `idProducto` (INTEGER, allowNull: false, FK a `producto`, onDelete: 'RESTRICT')
        *   `idVenta` (INTEGER, allowNull: false, FK a `venta`, onDelete: 'CASCADE')
        *   `idDashboard` (INTEGER, allowNull: true, FK a `dashboard`, onDelete: 'SET NULL')
    *   **Relaciones:** Pertenece a `Producto`, `Venta`, y opcionalmente a `Dashboard`.

3.  **`VentaXServicio`** (Detalle de Servicios Vendidos)
    *   **Tabla SQL:** `venta_x_servicio`
    *   **Campos Principales:**
        *   `idVentaXServicio` (INTEGER, PK, autoIncrement)
        *   `valorServicio` (DECIMAL(12, 2), defaultValue: 0.00) - Precio del servicio al momento de la venta.
        *   `idServicio` (INTEGER, allowNull: false, FK a `servicio`, onDelete: 'RESTRICT')
        *   `idCita` (INTEGER, allowNull: true, FK a `cita`, onDelete: 'SET NULL') - Si el servicio vendido proviene de una cita.
        *   `idVenta` (INTEGER, allowNull: false, FK a `venta`, onDelete: 'CASCADE')
    *   **Relaciones:** Pertenece a `Servicio`, `Venta`, y opcionalmente a `Cita`.

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_VENTAS_GESTIONAR`.

1.  **Crear Nueva Venta**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/ventas/`
    *   **Descripción:** Registra una nueva venta. El servicio calcula `total` e `iva`. Si la venta se crea con `estado: true` (general) y un `idEstado` (de proceso) que implique finalización, el stock de los productos es decrementado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "fecha": "YYYY-MM-DD", // Opcional, default fecha actual
          "clienteId": 1, // ID de un Cliente activo
          "dashboardId": null, // Opcional
          "estadoVentaId": 1, // ID de un Estado de proceso de venta (ej. "Pagada")
          "estado": true, // Opcional, default true. Estado general de la venta.
          "productos": [ // Opcional, pero debe haber al menos productos o servicios
            {
              "productoId": 1,
              "cantidad": 2,
              "valorUnitario": 25.50 // Precio al momento de la venta
            }
          ],
          "servicios": [ // Opcional
            {
              "servicioId": 1,
              "valorServicio": 50.00, // Precio al momento de la venta
              "citaId": null // Opcional, si está ligado a una cita
            }
          ]
        }
        ```
    *   **Validaciones:**
        *   `clienteId`, `estadoVentaId` son obligatorios.
        *   Debe proveerse al menos un producto en `productos` o un servicio en `servicios`.
        *   Para cada producto: `productoId` (existente y activo), `cantidad` (>0), `valorUnitario` (>=0).
        *   Para cada servicio: `servicioId` (existente y activo), `valorServicio` (>=0), `citaId` (opcional, si existe).
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Venta creada.", "data": { /* ...datos de la venta y sus detalles... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found` (Cliente, Estado, Producto o Servicio no encontrado/activo).

2.  **Listar Ventas**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/ventas/`
    *   **Descripción:** Obtiene una lista de ventas. Permite filtrar por `estado` (general), `clienteId`, `dashboardId`, `estadoVentaId` (estado de proceso).
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
        *   `clienteId` (INTEGER, opcional).
        *   `dashboardId` (INTEGER, opcional).
        *   `estadoVentaId` (INTEGER, opcional).
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Venta por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/ventas/:idVenta`
    *   **Descripción:** Obtiene los detalles de una venta, incluyendo productos y servicios asociados.
    *   **Parámetros de Solicitud (`params`):** `idVenta` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Estado de Proceso y/o Estado General de Venta**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/ventas/:idVenta/estado-proceso`
    *   **Descripción:** Actualiza el `idEstado` (estado del proceso, ej. "Enviada", "Completada") y/o el `estado` booleano (activa/anulada) de una venta. El servicio puede ajustar inventario basado en estos cambios.
    *   **Parámetros de Solicitud (`params`):** `idVenta` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estadoVentaId": 2, // Opcional, nuevo ID del Estado de proceso
          "estado": true // Opcional, nuevo estado booleano general
        }
        ```
    *   **Validaciones:** Debe proveerse al menos `estadoVentaId` o `estado`. `estadoVentaId` debe ser un ID de Estado válido.
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

5.  **Cambiar Estado General de Venta (Activa/Anulada)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/ventas/:idVenta/estado`
    *   **Descripción:** Cambia el estado booleano general de una venta. Si se anula (`estado: false`), el stock de productos se revierte (incrementa). Si se habilita (`estado: true`) una venta previamente anulada, el stock se descuenta (decrementa).
    *   **Parámetros de Solicitud (`params`):** `idVenta` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Venta**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/ventas/:idVenta/anular`
    *   **Descripción:** Establece el `estado` general de la venta a `false` y revierte el stock de los productos asociados (lo incrementa). Es la forma recomendada de cancelar una venta para mantener la integridad del inventario.
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Venta (Re-activar)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/ventas/:idVenta/habilitar`
    *   **Descripción:** Establece el `estado` general de la venta a `true` (si estaba anulada) y descuenta el stock de los productos asociados.
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Venta Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/ventas/:idVenta`
    *   **Descripción:** Elimina físicamente una venta y sus detalles (`ProductoXVenta`, `VentaXServicio` por `onDelete: CASCADE`). **Importante:** Esta operación NO revierte el stock de los productos. Se recomienda anular la venta si se necesita ajustar inventario.
    *   **Permisos Requeridos:** `MODULO_VENTAS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`.

---

### Cita

Este módulo gestiona la programación de citas para servicios, asociando clientes, empleados (opcionalmente), y los servicios a realizar. También maneja diferentes estados del proceso de la cita y el estado general del registro de la cita.

#### Modelo de Datos Asociado

1.  **`Cita`**
    *   **Tabla SQL:** `cita`
    *   **Campos Principales:**
        *   `idCita` (INTEGER, PK, autoIncrement, `id_cita`)
        *   `fechaHora` (DATETIME, allowNull: false, `fecha_hora`) - Fecha y hora programada para la cita.
        *   `idCliente` (INTEGER, allowNull: false, FK a `cliente`, onDelete: 'CASCADE') - Cliente que agenda la cita.
        *   `idEmpleado` (INTEGER, allowNull: true, FK a `empleado`, onDelete: 'SET NULL') - Empleado asignado (opcional).
        *   `idEstado` (INTEGER, allowNull: false, FK a `estado`, onDelete: 'RESTRICT') - Estado del proceso de la cita (ej. "Programada", "Confirmada", "Completada", "Cancelada").
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado general del registro de la cita (`true` activa, `false` anulada/cancelada).
    *   **Relaciones Principales:**
        *   `belongsTo(models.Cliente, { foreignKey: 'idCliente', as: 'cliente' })`
        *   `belongsTo(models.Empleado, { foreignKey: 'idEmpleado', as: 'empleado' })`
        *   `belongsTo(models.Estado, { foreignKey: 'idEstado', as: 'estadoDetalle' })`
        *   `belongsToMany(models.Servicio, { through: 'servicio_x_cita', foreignKey: 'id_cita',      otherKey: 'id_servicio',    as: 'serviciosProgramados' })`
        *   `hasMany(models.VentaXServicio, { foreignKey: 'idCita', as: 'detallesVenta' })` (Indica que una cita puede estar vinculada a detalles de una venta de servicios)

2.  **`ServicioXCita`** (Servicios Programados en la Cita)
    *   **Tabla SQL:** `servicio_x_cita`
    *   **Campos Principales:**
        *   `idServicioXCita` (INTEGER, PK, autoIncrement)
        *   `idServicio` (INTEGER, allowNull: false, FK a `servicio`, onDelete: 'CASCADE')
        *   `idCita` (INTEGER, allowNull: false, FK a `cita`, onDelete: 'CASCADE')
    *   **Índices:**
        *   Unique en (`id_servicio`, `id_cita`)
    *   **Relaciones:** Pertenece a `Servicio` y `Cita`.

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CITAS_GESTIONAR`.

1.  **Crear Nueva Cita**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/citas/`
    *   **Descripción:** Programa una nueva cita. El servicio puede enviar notificaciones por correo.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "fechaHora": "YYYY-MM-DDTHH:mm:ssZ", // Formato ISO8601, ej. "2024-08-15T14:30:00-05:00"
          "clienteId": 1, // ID de un Cliente activo
          "empleadoId": 1, // Opcional, ID de un Empleado activo
          "estadoCitaId": 1, // ID de un Estado de proceso de cita (ej. "Programada")
          "estado": true, // Opcional, default true
          "servicios": [1, 2] // Opcional, array de IDs de Servicios activos
        }
        ```
    *   **Validaciones:**
        *   `fechaHora`: obligatoria, formato ISO8601, no en el pasado.
        *   `clienteId`: obligatorio, Cliente activo.
        *   `empleadoId`: opcional, si se provee, Empleado activo.
        *   `estadoCitaId`: obligatorio, Estado existente.
        *   `servicios`: opcional, array de IDs de Servicios válidos y activos.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Cita creada.", "data": { /* ...datos de la cita y servicios... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found`.

2.  **Listar Citas**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/citas/`
    *   **Descripción:** Obtiene una lista de citas. Permite filtrar por `estado` (general), `clienteId`, `empleadoId`, `estadoCitaId` (estado de proceso), y `fecha`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
        *   `clienteId` (INTEGER, opcional).
        *   `empleadoId` (INTEGER, opcional).
        *   `estadoCitaId` (INTEGER, opcional).
        *   `fecha` (STRING YYYY-MM-DD, opcional) - Para filtrar citas en una fecha específica.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Cita por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/citas/:idCita`
    *   **Descripción:** Obtiene detalles de una cita, incluyendo cliente, empleado y servicios programados.
    *   **Parámetros de Solicitud (`params`):** `idCita` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Cita**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/citas/:idCita`
    *   **Descripción:** Actualiza campos de la cita como `fechaHora`, `clienteId`, `empleadoId`, `estadoCitaId`, `estado` (general). No gestiona la lista de servicios (usar endpoints dedicados).
    *   **Parámetros de Solicitud (`params`):** `idCita` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación, excepto `servicios`).
        ```json
        {
          "fechaHora": "YYYY-MM-DDTHH:mm:ssZ",
          "clienteId": 1,
          "empleadoId": null, // Para desasignar empleado
          "estadoCitaId": 2, // Ej. "Confirmada"
          "estado": true
        }
        ```
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

5.  **Cambiar Estado General de Cita**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/citas/:idCita/estado`
    *   **Descripción:** Cambia el estado booleano general de una cita (activa/anulada). Puede disparar notificaciones.
    *   **Parámetros de Solicitud (`params`):** `idCita` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Cita**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/citas/:idCita/anular`
    *   **Descripción:** Establece el estado general de la cita a `false`. Envía notificación de cancelación.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Cita (Re-activar)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/citas/:idCita/habilitar`
    *   **Descripción:** Establece el estado general de la cita a `true`. Envía notificación de reactivación.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Cita Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/citas/:idCita`
    *   **Descripción:** Elimina físicamente una cita y sus asociaciones en `ServicioXCita` (`onDelete: CASCADE`).
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`.

9.  **Agregar Servicios a Cita**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/citas/:idCita/servicios`
    *   **Descripción:** Asocia uno o más servicios a una cita existente.
    *   **Parámetros de Solicitud (`params`):** `idCita` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idServicios": [3, 4] // Array de IDs de Servicios existentes y activos
        }
        ```
    *   **Validaciones:** `idServicios` debe ser un array de IDs de Servicios válidos.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

10. **Quitar Servicios de Cita**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/citas/:idCita/servicios`
    *   **Descripción:** Desasocia uno o más servicios de una cita.
    *   **Parámetros de Solicitud (`params`):** `idCita` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idServicios": [1, 2] // Array de IDs de Servicios a quitar de la cita
        }
        ```
    *   **Validaciones:** `idServicios` debe ser un array de IDs de Servicios.
    *   **Permisos Requeridos:** `MODULO_CITAS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.
