### Auth

Este módulo gestiona el registro de nuevos usuarios, el inicio de sesión, la recuperación de contraseñas y el cierre de sesión.

#### Modelos de Datos Asociados

1.  **`Usuario`**
    *   **Tabla SQL:** `usuario`
    *   **Campos Principales:**
        *   `idUsuario` (INTEGER, PK, autoIncrement, `id_usuario`)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `contrasena` (TEXT, allowNull: false)
        *   `idRol` (INTEGER, allowNull: false, FK a `rol`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`
        *   `hasMany(models.TokenRecuperacion, { foreignKey: 'idUsuario', as: 'tokensRecuperacion' })`

2.  **`TokenRecuperacion`**
    *   **Tabla SQL:** `token_recuperacion`
    *   **Campos Principales:**
        *   `idTokenRecuperacion` (INTEGER, PK, autoIncrement, `id_token_recuperacion`)
        *   `idUsuario` (INTEGER, allowNull: false, FK a `usuario`, onDelete: 'CASCADE')
        *   `token` (TEXT, allowNull: false, unique: true)
        *   `fechaExpiracion` (DATE, allowNull: false, `fecha_expiracion`)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuario' })`

#### Endpoints

1.  **Registrar Nuevo Usuario**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/registrar`
    *   **Descripción:** Registra un nuevo usuario, que por defecto se crea con el rol de "Cliente" y su perfil de cliente asociado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123",
          "nombre": "NombreUsuario",
          "apellido": "ApellidoUsuario",
          "telefono": "1234567890",
          "tipoDocumento": "CC", // Ej: CC, CE, Pasaporte
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email, único.
        *   Contraseña: obligatoria, mín. 8 caracteres.
        *   Nombre, Apellido, Teléfono, Tipo de Documento, Número de Documento, Fecha de Nacimiento: obligatorios, con validaciones de longitud y/o formato.
        *   Número de Documento: único para Clientes.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario registrado exitosamente. Por favor, inicia sesión.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña... */ },
                "token": "jwt_token_aqui" // Token para inicio de sesión inmediato opcional
              }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo ya existe, campos faltantes).
        *   `409 Conflict`: Si el correo o número de documento ya existe (manejado por validadores).

2.  **Iniciar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/login`
    *   **Descripción:** Autentica a un usuario y devuelve un token JWT.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
        *   Contraseña: obligatoria.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Inicio de sesión exitoso.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña, con info de rol... */ },
                "token": "jwt_token_aqui"
              }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Credenciales incorrectas.

3.  **Solicitar Recuperación de Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/solicitar-recuperacion`
    *   **Descripción:** Envía un correo electrónico al usuario con un enlace o token para restablecer su contraseña.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Si el correo electrónico está registrado, recibirás instrucciones para restablecer tu contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación.

4.  **Validar Token de Recuperación**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/validar-token-recuperacion`
    *   **Descripción:** Verifica si un token de recuperación es válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui"
        }
        ```
    *   **Validaciones:** El servicio valida la existencia y vigencia del token.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Token de recuperación válido."
            }
            ```
        *   `400 Bad Request` o `404 Not Found`: Token inválido o expirado.

5.  **Resetear Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/resetear-contrasena`
    *   **Descripción:** Establece una nueva contraseña para el usuario utilizando un token de recuperación válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui",
          "nuevaContrasena": "nuevaPassword123",
          "confirmarNuevaContrasena": "nuevaPassword123"
        }
        ```
    *   **Validaciones:**
        *   Token: obligatorio.
        *   Nueva Contraseña: obligatoria, mín. 8 caracteres.
        *   Confirmar Nueva Contraseña: debe coincidir con la nueva contraseña.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Contraseña actualizada exitosamente. Ya puedes iniciar sesión con tu nueva contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. contraseñas no coinciden, token inválido).
        *   `404 Not Found`: Token no encontrado o inválido.

6.  **Cerrar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/logout`
    *   **Descripción:** Invalida la sesión del servidor (si se usa `express-session`). Para JWT stateless, es principalmente una acción del lado del cliente (eliminar el token).
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Validaciones:** Ninguna específica.
    *   **Permisos Requeridos:** Puede requerir autenticación si se invalida una sesión activa del servidor.
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Sesión cerrada exitosamente." // o "Logout procesado (el cliente debe eliminar el token JWT)."
            }
            ```
        *   `500 Internal Server Error`: Si hay problemas al destruir la sesión del servidor.

### Rol

Este módulo se encarga de la gestión de roles de usuario y los permisos asociados a cada rol.

#### Modelo de Datos Asociado

1.  **`Rol`**
    *   **Tabla SQL:** `rol`
    *   **Campos Principales:**
        *   `idRol` (INTEGER, PK, autoIncrement, `id_rol`)
        *   `nombre` (STRING(50), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `hasMany(models.Usuario, { foreignKey: 'idRol', as: 'usuarios' })`
        *   `belongsToMany(models.Permisos, { through: 'permisos_x_rol', foreignKey: 'id_rol', otherKey: 'id_permiso', as: 'permisos' })`

#### Endpoints

1.  **Crear Nuevo Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Crea un nuevo rol en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre del Rol",
          "descripcion": "Descripción detallada del rol (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-100 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Rol creado exitosamente.",
              "data": { /* ...datos del rol creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, tipo de dato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

2.  **Listar Roles**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Obtiene una lista de todos los roles. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por roles activos (`true`) o inactivos (`false`).
    *   **Validaciones:** Ninguna específica para los parámetros de consulta más allá del tipo implícito.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de roles... */ ]
            }
            ```
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

3.  **Obtener Rol por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Obtiene un rol específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del rol... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

4.  **Actualizar Rol**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Actualiza un rol existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre del Rol", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-100 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol actualizado exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del rol ya existe.

5.  **Cambiar Estado de Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del rol ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

6.  **Anular Rol (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/anular`
    *   **Descripción:** Deshabilita un rol (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del rol actualizado con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

7.  **Habilitar Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/habilitar`
    *   **Descripción:** Habilita un rol (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol habilitado exitosamente.",
              "data": { /* ...datos del rol actualizado con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

8.  **Eliminar Rol Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Elimina físicamente un rol de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR` (o un permiso más específico y restrictivo si se define).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito, sin contenido en la respuesta.
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el rol no puede ser eliminado debido a restricciones (ej. usuarios asignados a este rol).

9.  **Listar Permisos de un Rol**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Obtiene la lista de permisos asociados a un rol específico.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos asociados al rol... */ ]
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

10. **Asignar Permisos a Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Asigna uno o más permisos a un rol. Si el rol ya tiene algunos de los permisos, no se duplican. Los permisos no incluidos en la solicitud no se eliminan.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2, 5] // Array de IDs de permisos a asignar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos asignados/actualizados para el rol ID X.",
              "data": { /* ...lista de todos los permisos del rol después de la asignación... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. IDs no válidos, array vacío).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol o alguno de los permisos no encontrado.

11. **Quitar Permisos de Rol**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Quita uno o más permisos de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2] // Array de IDs de permisos a quitar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos quitados del rol ID X.",
              "data": { /* ...lista de permisos restantes del rol... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

### Permisos

Este módulo administra los permisos individuales que pueden ser asignados a los roles. Los permisos definen acciones específicas que un usuario puede realizar en el sistema.

#### Modelo de Datos Asociado

1.  **`Permisos`**
    *   **Tabla SQL:** `permisos`
    *   **Campos Principales:**
        *   `idPermiso` (INTEGER, PK, autoIncrement, `id_permiso`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Rol, { through: 'permisos_x_rol', foreignKey: 'id_permiso', otherKey: 'id_rol', as: 'roles' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PERMISOS_GESTIONAR`.

1.  **Crear Nuevo Permiso**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Crea un nuevo permiso en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NOMBRE_DEL_PERMISO_EN_MAYUSCULAS",
          "descripcion": "Descripción detallada del permiso (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-150 caracteres, único. Usualmente en formato `MODULO_ENTIDAD_ACCION`.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Permiso creado exitosamente.",
              "data": { /* ...datos del permiso creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Permisos**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Obtiene una lista de todos los permisos. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por permisos activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Permiso por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Obtiene un permiso específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del permiso... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

4.  **Actualizar Permiso**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Actualiza un permiso existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NUEVO_NOMBRE_PERMISO", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-150 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso actualizado exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del permiso ya existe.

5.  **Cambiar Estado de Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un permiso.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del permiso ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

6.  **Anular Permiso (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/anular`
    *   **Descripción:** Deshabilita un permiso (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del permiso con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

7.  **Habilitar Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/habilitar`
    *   **Descripción:** Habilita un permiso (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso habilitado exitosamente.",
              "data": { /* ...datos del permiso con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

8.  **Eliminar Permiso Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Elimina físicamente un permiso de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el permiso no puede ser eliminado (ej. está asignado a roles).

### Usuario

Este módulo es responsable de la gestión general de las cuentas de usuario, incluyendo su creación (que puede implicar la creación de un perfil de Cliente o Empleado asociado), listado, detalle, actualización y cambios de estado. La creación de usuarios a través de `/api/auth/registrar` está orientada al auto-registro de Clientes, mientras que este módulo permite a los administradores gestionar todos los tipos de usuarios.

#### Modelo de Datos Asociado

1.  **`Usuario`** (Ver descripción detallada en la sección `Auth > Modelos de Datos Asociados`)
    *   **Tabla SQL:** `usuario`
    *   **Relaciones Clave para este Módulo:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_USUARIOS_GESTIONAR`.

1.  **Crear Nuevo Usuario (Administrativo)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Crea un nuevo usuario en el sistema, permitiendo especificar el rol y los datos del perfil asociado (Cliente o Empleado). El servicio se encarga de crear el perfil correspondiente según el `idRol` proporcionado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "nuevo.usuario@example.com",
          "contrasena": "passwordSeguro123",
          "idRol": 2, // ID del Rol (ej. 1 para Admin, 2 para Cliente, 3 para Empleado)
          "estado": true, // Opcional, por defecto true
          // Campos de perfil (dependiendo del rol, algunos serán obligatorios a nivel de servicio)
          "nombre": "NombrePerfil",
          "apellido": "ApellidoPerfil",
          "telefono": "0987654321",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: 'Cédula de Ciudadanía', 'Pasaporte', etc.
          "numeroDocumento": "987654321",
          "fechaNacimiento": "YYYY-MM-DD", // Para Cliente
          // Campos específicos de Empleado (si el idRol corresponde a un Empleado)
          "fechaContratacion": "YYYY-MM-DD",
          "salario": 50000.00,
          "cargo": "Puesto del Empleado"
        }
        ```
    *   **Validaciones:**
        *   `correo`: obligatorio, email, único.
        *   `contrasena`: obligatoria, mín. 8 caracteres.
        *   `idRol`: obligatorio, entero positivo, debe existir un Rol activo con ese ID.
        *   `estado`: opcional, boolean.
        *   Campos de perfil (`nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento`): opcionales a nivel de validador de ruta, pero el servicio puede requerirlos según el rol. `numeroDocumento` se valida como único dentro de Clientes o Empleados respectivamente.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario creado exitosamente.",
              "data": { /* ...datos del usuario creado, incluyendo perfil si aplica... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo duplicado, rol no existe, campos de perfil inválidos).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Usuarios**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Obtiene una lista de todos los usuarios. Permite filtrar por estado y por `idRol`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por usuarios activos (`true`) o inactivos (`false`).
        *   `idRol` (INTEGER, opcional): Filtrar por ID de Rol.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de usuarios, usualmente con información básica y de rol... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Usuario por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Obtiene un usuario específico por su ID, incluyendo su información de rol y perfil asociado (Cliente o Empleado).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del usuario, rol, y perfil (clienteInfo o empleadoInfo)... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

4.  **Actualizar Usuario**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Actualiza un usuario existente por su ID. Permite actualizar correo, contraseña (si se provee), rol, estado y campos del perfil asociado. Si `contrasena` se envía vacía, se ignora (no se actualiza).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario.actualizado@example.com", // Opcional
          "contrasena": "nuevaPassword123", // Opcional, si no se envía o es "", no se actualiza
          "idRol": 2, // Opcional
          "estado": true, // Opcional
          // Campos de perfil a actualizar
          "nombre": "Nombre Actualizado",
          // ...otros campos de perfil...
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `correo`: opcional, email, único (excepto para el propio usuario).
        *   `contrasena`: opcional, mín. 8 caracteres si se provee.
        *   `idRol`: opcional, entero positivo, debe existir un Rol activo.
        *   `estado`: opcional, boolean.
        *   Campos de perfil: opcionales, con validaciones similares a la creación. `numeroDocumento` se valida como único (excepto para el propio usuario).
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario actualizado exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el nuevo correo o número de documento ya existe para otro usuario/perfil.

5.  **Cambiar Estado de Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un usuario.
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del usuario ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

6.  **Anular Usuario (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/anular`
    *   **Descripción:** Deshabilita un usuario (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del usuario con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

7.  **Habilitar Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/habilitar`
    *   **Descripción:** Habilita un usuario (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario habilitado exitosamente.",
              "data": { /* ...datos del usuario con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

8.  **Eliminar Usuario Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Elimina físicamente un usuario y sus perfiles asociados (Cliente/Empleado) de la base de datos. ¡Usar con extrema precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR` (o un permiso más específico y restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el usuario no puede ser eliminado debido a otras dependencias (ej. transacciones activas, etc., aunque el `onDelete: CASCADE` en perfiles debería manejarlos).
