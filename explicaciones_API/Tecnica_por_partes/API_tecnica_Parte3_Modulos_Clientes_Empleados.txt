### Cliente

Este módulo se encarga de la gestión de los perfiles de cliente. Cada cliente está asociado a una cuenta de usuario (`Usuario`) que maneja la autenticación. Las operaciones de este módulo se centran en la información específica del perfil del cliente.

#### Modelo de Datos Asociado

1.  **`Cliente`**
    *   **Tabla SQL:** `cliente`
    *   **Campos Principales:**
        *   `idCliente` (INTEGER, PK, autoIncrement, `id_cliente`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Cliente.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuarioCuenta' })`
        *   `hasMany(models.Venta, { foreignKey: 'idCliente', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idCliente', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CLIENTES_GESTIONAR`.

1.  **Crear Nuevo Cliente (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Crea un nuevo perfil de cliente y, simultáneamente, una nueva cuenta de usuario (`Usuario`) para ese cliente. El rol por defecto para el usuario creado es "Cliente".
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente
          "nombre": "Nombre Cliente",
          "apellido": "Apellido Cliente",
          "telefono": "1234567890",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: "Cédula de Extranjería", "Pasaporte"
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": true, // Opcional, estado del perfil Cliente (por defecto true)
          // Campos para la Cuenta de Usuario
          "correo": "cliente@example.com", // Usado para Cliente.correo y Usuario.correo
          "contrasena": "passwordSeguro123",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (por defecto true)
        }
        ```
    *   **Validaciones:**
        *   Perfil Cliente: `nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` debe ser único en la tabla `cliente`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en las tablas `usuario` y `cliente`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Cliente creado exitosamente.",
              "data": { /* ...datos del cliente creado y su usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. `numeroDocumento` o `correo` duplicado, campos faltantes).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Clientes**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de cliente. Permite filtrar por `estado` del perfil del cliente.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por clientes activos (`true`) o inactivos (`false`) según el campo `estado` del modelo Cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de clientes, incluyendo información de su cuenta de usuario asociada... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Cliente por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Obtiene un perfil de cliente específico por su `idCliente`, incluyendo la información de la cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del cliente y su cuenta de usuario asociada... */ }
            }
            ```
        *   `400 Bad Request`: ID de cliente inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

4.  **Actualizar Cliente**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Actualiza un perfil de cliente existente y, opcionalmente, el correo o estado de su cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente (todos opcionales)
          "nombre": "Nombre Actualizado",
          "apellido": "Apellido Actualizado",
          "telefono": "1122334455",
          "tipoDocumento": "Pasaporte",
          "numeroDocumento": "AB123456",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": false, // Estado del perfil del Cliente
          // Campos de la Cuenta de Usuario (todos opcionales)
          "correo": "nuevo.correo@example.com", // Si se actualiza, debe ser único
          "estadoUsuario": false, // Estado de la cuenta Usuario
          "idUsuario": null // Opcional: permite desvincular (null) o re-vincular un idUsuario existente y no asociado
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   Campos de perfil: opcionales, pero si se proveen, deben cumplir sus reglas (ej. `numeroDocumento` único si cambia).
        *   `correo`: opcional, si se provee debe ser email válido y único en `usuario` y `cliente` (excluyendo el registro actual).
        *   `idUsuario`: opcional, si se provee como entero debe ser un `idUsuario` válido y no asociado a otro cliente. Si es `null`, desvincula el usuario actual (si la lógica de servicio lo permite).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente actualizado exitosamente.",
              "data": { /* ...datos del cliente y usuario actualizados... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente o `idUsuario` (si se intenta re-vincular) no encontrado.
        *   `409 Conflict`: Si `numeroDocumento` o `correo` duplicado.

5.  **Cambiar Estado de Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/estado`
    *   **Descripción:** Cambia el estado del perfil de un cliente (campo `estado` en el modelo `Cliente`). Esto no afecta directamente el estado de la cuenta de `Usuario` asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true, para el perfil del Cliente
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del cliente ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del cliente actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

6.  **Anular Cliente (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/anular`
    *   **Descripción:** Deshabilita el perfil de un cliente (establece `estado = false` en `Cliente`).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del cliente con estado false... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

7.  **Habilitar Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/habilitar`
    *   **Descripción:** Habilita el perfil de un cliente (establece `estado = true` en `Cliente`).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente habilitado exitosamente.",
              "data": { /* ...datos del cliente con estado true... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

8.  **Eliminar Cliente Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Elimina físicamente un perfil de cliente. La cuenta de `Usuario` asociada NO se elimina automáticamente debido a la restricción `onDelete: 'RESTRICT'`. Se debe gestionar la eliminación del usuario por separado si es necesario, o cambiar la política de integridad.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`: Si hay otras dependencias que impiden la eliminación (ej. Ventas, Citas asociadas que no tienen `onDelete: CASCADE` o `SET NULL` para `idCliente`).

### Empleado

Este módulo gestiona los perfiles de los empleados. Similar a los clientes, cada empleado está asociado a una cuenta de usuario (`Usuario`) para la autenticación. Este módulo maneja la información específica del perfil del empleado y sus especialidades.

#### Modelo de Datos Asociado

1.  **`Empleado`**
    *   **Tabla SQL:** `empleado`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, autoIncrement, `id_empleado`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Empleado.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'cuentaUsuario' })`
        *   `belongsToMany(models.Especialidad, { through: 'empleado_especialidad', foreignKey: 'id_empleado', otherKey: 'id_especialidad', as: 'especialidades' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEmpleado', as: 'citasAtendidas' })`
        *   `hasMany(models.Abastecimiento, { foreignKey: 'idEmpleadoAsignado', as: 'abastecimientosAsignados' })`
        *   `hasMany(models.Novedades, { foreignKey: 'idEmpleado', as: 'novedadesHorario' })`

2.  **`EmpleadoEspecialidad`** (Tabla de Unión)
    *   **Tabla SQL:** `empleado_especialidad`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, FK a `empleado`)
        *   `idEspecialidad` (INTEGER, PK, FK a `especialidad`)
    *   **Relaciones:**
        *   `belongsTo(models.Empleado, { foreignKey: 'idEmpleado' })`
        *   `belongsTo(models.Especialidad, { foreignKey: 'idEspecialidad' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_EMPLEADOS_GESTIONAR`.

1.  **Crear Nuevo Empleado (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Crea un nuevo perfil de empleado y una cuenta de usuario asociada. El rol de la cuenta de usuario creada debería ser uno apropiado para empleados.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Empleado
          "nombre": "Nombre Empleado",
          "apellido": "Apellido Empleado",
          "telefono": "2345678901",
          "tipoDocumento": "Cédula de Ciudadanía",
          "numeroDocumento": "234567890",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoEmpleado": true, // Opcional, estado del perfil Empleado (def: true)
          // Campos para la Cuenta de Usuario
          "correo": "empleado@example.com", // Usado para Empleado.correo y Usuario.correo
          "contrasena": "passwordFuerte456",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (def: true)
          // "idRol" para el usuario se gestiona en el servicio, asignando un rol de empleado.
        }
        ```
    *   **Validaciones:**
        *   Perfil Empleado: `nombre`, `apellido`, `correo`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` y `correo` deben ser únicos en la tabla `empleado`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en la tabla `usuario`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Empleado creado exitosamente.",
              "data": { /* ...datos del empleado y usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Empleados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de empleado. Permite filtrar por `estado` del perfil.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por empleados activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de empleados... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Empleado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Obtiene un perfil de empleado por `idEmpleado`, incluyendo cuenta de usuario y especialidades.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos del empleado, usuario y especialidades... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Empleado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Actualiza un perfil de empleado y, opcionalmente, el correo/estado de su cuenta de usuario.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales similares a la creación, ej. `nombre`, `apellido`, `correo`, `telefono`, `estadoEmpleado`, `estadoUsuario`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Empleado actualizado.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`.

5.  **Cambiar Estado de Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/estado`
    *   **Descripción:** Cambia el estado del perfil de un empleado.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado del empleado cambiado.", "data": { /* ...empleado actualizado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Empleado (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/anular`
    *   **Descripción:** Establece `estado = false` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/habilitar`
    *   **Descripción:** Establece `estado = true` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Empleado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Elimina el perfil del empleado. La cuenta de `Usuario` no se elimina (por `onDelete: 'RESTRICT'`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `401`, `403`, `404`, `409`.

9.  **Listar Especialidades de Empleado**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Obtiene todas las especialidades asociadas a un empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

10. **Asignar Especialidades a Empleado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Asigna una o más especialidades a un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2, 3] // Array de IDs de especialidades
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades asignadas.", "data": { /* ...especialidades actualizadas del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado o alguna Especialidad no encontrada).

11. **Quitar Especialidades de Empleado**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Quita una o más especialidades de un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2] // Array de IDs de especialidades a quitar
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades quitadas.", "data": { /* ...especialidades restantes del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

### Especialidad

Este módulo gestiona las especialidades que pueden ser asignadas a los empleados y que también pueden estar asociadas a los servicios ofrecidos.

#### Modelo de Datos Asociado

1.  **`Especialidad`**
    *   **Tabla SQL:** `especialidad`
    *   **Campos Principales:**
        *   `idEspecialidad` (INTEGER, PK, autoIncrement, `id_especialidad`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Empleado, { through: 'empleado_especialidad', foreignKey: 'id_especialidad', otherKey: 'id_empleado', as: 'empleados' })`
        *   `hasMany(models.Servicio, { foreignKey: 'idEspecialidad', as: 'servicios' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_ESPECIALIDADES_GESTIONAR`.

1.  **Crear Nueva Especialidad**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Crea una nueva especialidad en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre de la Especialidad", // Ej: "Cardiología", "Estilista Canino"
          "descripcion": "Descripción detallada de la especialidad (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Especialidad creada exitosamente.",
              "data": { /* ...datos de la especialidad creada... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Especialidades**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Obtiene una lista de todas las especialidades. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por especialidades activas (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Especialidad por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Obtiene una especialidad específica por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos de la especialidad... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Especialidad**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Actualiza una especialidad existente por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre Especialidad", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:** Campos opcionales, pero si se proveen deben cumplir las reglas (ej. `nombre` único y longitud).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidad actualizada.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si `nombre` duplicado).

5.  **Cambiar Estado de Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de una especialidad.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado de la especialidad cambiado.", "data": { /* ...especialidad actualizada... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Especialidad (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/anular`
    *   **Descripción:** Establece `estado = false` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/habilitar`
    *   **Descripción:** Establece `estado = true` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Especialidad Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Elimina físicamente una especialidad. El servicio debe verificar que no esté en uso por Empleados o Servicios.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `204 No Content`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si está en uso).
