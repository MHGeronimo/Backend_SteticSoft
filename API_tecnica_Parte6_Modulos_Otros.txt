### Estado

Este módulo gestiona los diferentes estados que pueden tener entidades como Ventas o Citas (ej. "Pendiente", "Confirmado", "En Proceso", "Completado", "Cancelado").

#### Modelo de Datos Asociado

1.  **`Estado`**
    *   **Tabla SQL:** `estado`
    *   **Campos Principales:**
        *   `idEstado` (INTEGER, PK, autoIncrement, `id_estado`)
        *   `nombreEstado` (STRING(45), allowNull: false, unique: true, `nombre_estado`)
    *   **Relaciones Principales:**
        *   `hasMany(models.Venta, { foreignKey: 'idEstado', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEstado', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo, por defecto, requieren el permiso `MODULO_ESTADOS_GESTIONAR`. La ruta GET para listar todos los estados podría tener permisos más flexibles si se considera que esta información es menos sensible.

1.  **Crear Nuevo Estado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Crea un nuevo tipo de estado en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nombre del Estado" // Ej: "Pendiente de Pago", "Confirmada", "Cancelada por Cliente"
        }
        ```
    *   **Validaciones:**
        *   `nombreEstado`: obligatorio, string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Estado creado exitosamente.",
              "data": { /* ...datos del estado creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, formato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Estados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Obtiene una lista de todos los estados disponibles.
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso de lectura más general).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de estados... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Estado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Obtiene un estado específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del estado... */ }
            }
            ```
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.

4.  **Actualizar Estado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Actualiza un estado existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nuevo Nombre del Estado"
        }
        ```
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
        *   `nombreEstado`: opcional (si se envía, no puede estar vacío), string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado actualizado exitosamente.",
              "data": { /* ...datos del estado actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el nuevo `nombreEstado` ya existe.

5.  **Eliminar Estado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Elimina físicamente un estado de la base de datos. Esta acción fallará si el estado está siendo utilizado por alguna Venta o Cita.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el estado está en uso y no puede ser eliminado.

---
**Nota sobre otros módulos:**

*   **Abastecimiento:** No se encontró una sección H3 dedicada con endpoints propios para "Abastecimiento" en el archivo `API_tecnica_Parte2_Modulos.txt`. Su modelo de datos y relaciones se mencionan dentro de los módulos `Producto` y `Empleado`.
*   **Novedades:** No se encontró una sección H3 dedicada con endpoints propios para "Novedades" en el archivo `API_tecnica_Parte2_Modulos.txt`. Su modelo de datos y relaciones se mencionan dentro del módulo `Empleado`.
*   **Dashboard:** No se encontró una sección H3 dedicada con endpoints propios para "Dashboard" en el archivo `API_tecnica_Parte2_Modulos.txt`. Se menciona como una tabla y clave foránea en los módulos `Compra` y `Venta`, sugiriendo un uso interno para agrupación de datos sin una API de gestión directa expuesta.
