**1. Introducción**

Esta documentación técnica describe la API interna para la gestión de proyectos y tareas. La API está diseñada para ser consumida por aplicaciones cliente (web, móvil) y proporciona funcionalidades para crear, leer, actualizar y eliminar (CRUD) entidades como proyectos, tareas, usuarios y comentarios. El objetivo principal es ofrecer una interfaz robusta, segura y eficiente para interactuar con los datos de la aplicación.

**2. Arquitectura General**

La API sigue una arquitectura RESTful, utilizando métodos HTTP estándar (GET, POST, PUT, DELETE) para las operaciones sobre los recursos. Está construida sobre un stack tecnológico moderno (especificar el stack si se conoce, por ejemplo, Python/Django Rest Framework, Node.js/Express, etc.). La estructura del proyecto se organiza en módulos que representan las diferentes funcionalidades principales (ej. `proyectos`, `tareas`, `usuarios`). Se utiliza un patrón Modelo-Vista-Controlador (MVC) o similar para separar las responsabilidades.

**3. Configuración del Entorno**

Para ejecutar la API en un entorno de desarrollo local, se requieren los siguientes componentes:

*   (Listar dependencias principales, ej: Python 3.x, Node.js 1x.x, Docker)
*   Gestor de paquetes (ej: pip, npm)
*   Base de datos (ej: PostgreSQL, MySQL, MongoDB)

Las variables de entorno necesarias para la configuración (ej. credenciales de base de datos, claves secretas, modo debug) se gestionan a través de un archivo `.env` (o similar, especificar el método). Se proporcionará un archivo de ejemplo (`.env.example`) con las variables requeridas.

**4. Autenticación y Autorización**

La API utiliza un sistema de autenticación basado en tokens (ej. JWT - JSON Web Tokens).

*   **Autenticación:** Los usuarios deben enviar una petición POST a un endpoint específico (`/api/auth/login` o similar) con sus credenciales (email y contraseña). Si las credenciales son válidas, la API retorna un token de acceso. Este token debe ser incluido en la cabecera `Authorization` (como `Bearer <token>`) en todas las peticiones subsecuentes a endpoints protegidos.
*   **Expiración de Tokens:** Los tokens de acceso tienen un tiempo de vida limitado por seguridad. Se implementará un mecanismo de refresco de tokens (si aplica) para permitir a los usuarios mantener su sesión activa sin necesidad de re-autenticarse frecuentemente.
*   **Autorización:** Una vez autenticado, el sistema verifica los permisos del usuario para acceder a determinados recursos o realizar ciertas acciones. Esto se puede implementar mediante roles (ej. administrador, usuario regular) o permisos granulares asociados a cada usuario o grupo de usuarios. Los decoradores o middlewares se utilizan en los endpoints para asegurar que el usuario tiene los permisos necesarios.

**5. Manejo de Errores**

La API utiliza códigos de estado HTTP estándar para indicar el resultado de las peticiones.

*   `2xx` (ej. `200 OK`, `201 Created`): Petición exitosa.
*   `4xx` (ej. `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found`): Errores del cliente.
*   `5xx` (ej. `500 Internal Server Error`): Errores del servidor.

Las respuestas de error (especialmente `4xx` y `5xx`) incluirán un cuerpo en formato JSON con un mensaje descriptivo del error y, opcionalmente, un código de error interno para facilitar la depuración. Por ejemplo:

```json
{
  "error": "descripcion_del_error",
  "message": "Mensaje legible para el usuario o desarrollador.",
  "details": { /* campos adicionales con más información del error si es necesario */ }
}
```

Se implementará un sistema de logging centralizado para registrar todos los errores y eventos importantes de la aplicación, facilitando el monitoreo y la solución de problemas.

**6. Validación de Datos**

Todas las entradas de datos (payloads de peticiones POST/PUT, parámetros de consulta) son validadas antes de ser procesadas.

*   **Nivel de Controlador/Serializador:** La validación se realiza a nivel de controlador o mediante el uso de serializadores/validadores que definen las reglas para cada campo (tipo de dato, longitud máxima/mínima, formatos específicos como email o URL, campos requeridos, etc.).
*   **Respuestas de Validación:** Si la validación falla, la API responderá con un código de estado `400 Bad Request` o `422 Unprocessable Entity`, y el cuerpo de la respuesta incluirá detalles sobre los campos que no cumplieron con las reglas de validación. Por ejemplo:

```json
{
  "error": "validation_failed",
  "message": "Uno o más campos no son válidos.",
  "details": {
    "campo_con_error_1": ["Mensaje de error para el campo 1."],
    "campo_con_error_2": ["Mensaje de error para el campo 2."]
  }
}
```

**7. Base de Datos (resumen inicial)**

La API interactúa con una base de datos relacional (ej. PostgreSQL) o NoSQL (ej. MongoDB) para la persistencia de datos. Se utiliza un ORM (Object-Relational Mapper) o ODM (Object-Document Mapper) (ej. SQLAlchemy, Django ORM, Mongoose) para abstraer las interacciones con la base de datos, facilitando las migraciones de esquema y las consultas. Las migraciones de base de datos se gestionarán con una herramienta específica (ej. Alembic, Django Migrations). En esta etapa inicial, no se detallarán todos los modelos, pero se anticipa la necesidad de entidades como `Usuarios`, `Proyectos`, `Tareas`, `Comentarios`, etc.

**8. Consideraciones Adicionales (tareas programadas, email)**

*   **Tareas Programadas:** Para operaciones que deben ejecutarse periódicamente (ej. limpieza de datos antiguos, envío de recordatorios), se utilizará un sistema de gestión de tareas en segundo plano (ej. Celery con RabbitMQ/Redis, cron jobs).
*   **Envío de Emails:** La API integrará un servicio para el envío de correos electrónicos transaccionales (ej. confirmación de cuenta, notificaciones, restablecimiento de contraseña). Esto se realizará
a través de un proveedor de servicios de email (ej. SendGrid, Mailgun) o un servidor SMTP configurado.

---

## Módulos Principales y Endpoints

### Auth

Este módulo gestiona el registro de nuevos usuarios, el inicio de sesión, la recuperación de contraseñas y el cierre de sesión.

#### Modelos de Datos Asociados

1.  **`Usuario`**
    *   **Tabla SQL:** `usuario`
    *   **Campos Principales:**
        *   `idUsuario` (INTEGER, PK, autoIncrement, `id_usuario`)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `contrasena` (TEXT, allowNull: false)
        *   `idRol` (INTEGER, allowNull: false, FK a `rol`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`
        *   `hasMany(models.TokenRecuperacion, { foreignKey: 'idUsuario', as: 'tokensRecuperacion' })`

2.  **`TokenRecuperacion`**
    *   **Tabla SQL:** `token_recuperacion`
    *   **Campos Principales:**
        *   `idTokenRecuperacion` (INTEGER, PK, autoIncrement, `id_token_recuperacion`)
        *   `idUsuario` (INTEGER, allowNull: false, FK a `usuario`, onDelete: 'CASCADE')
        *   `token` (TEXT, allowNull: false, unique: true)
        *   `fechaExpiracion` (DATE, allowNull: false, `fecha_expiracion`)
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuario' })`

#### Endpoints

1.  **Registrar Nuevo Usuario**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/registrar`
    *   **Descripción:** Registra un nuevo usuario, que por defecto se crea con el rol de "Cliente" y su perfil de cliente asociado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123",
          "nombre": "NombreUsuario",
          "apellido": "ApellidoUsuario",
          "telefono": "1234567890",
          "tipoDocumento": "CC", // Ej: CC, CE, Pasaporte
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email, único.
        *   Contraseña: obligatoria, mín. 8 caracteres.
        *   Nombre, Apellido, Teléfono, Tipo de Documento, Número de Documento, Fecha de Nacimiento: obligatorios, con validaciones de longitud y/o formato.
        *   Número de Documento: único para Clientes.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario registrado exitosamente. Por favor, inicia sesión.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña... */ },
                "token": "jwt_token_aqui" // Token para inicio de sesión inmediato opcional
              }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo ya existe, campos faltantes).
        *   `409 Conflict`: Si el correo o número de documento ya existe (manejado por validadores).

2.  **Iniciar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/login`
    *   **Descripción:** Autentica a un usuario y devuelve un token JWT.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com",
          "contrasena": "password123"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
        *   Contraseña: obligatoria.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Inicio de sesión exitoso.",
              "data": {
                "usuario": { /* ...datos del usuario sin contraseña, con info de rol... */ },
                "token": "jwt_token_aqui"
              }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Credenciales incorrectas.

3.  **Solicitar Recuperación de Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/solicitar-recuperacion`
    *   **Descripción:** Envía un correo electrónico al usuario con un enlace o token para restablecer su contraseña.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario@example.com"
        }
        ```
    *   **Validaciones:**
        *   Correo: obligatorio, formato email.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Si el correo electrónico está registrado, recibirás instrucciones para restablecer tu contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación.

4.  **Validar Token de Recuperación**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/validar-token-recuperacion`
    *   **Descripción:** Verifica si un token de recuperación es válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui"
        }
        ```
    *   **Validaciones:** El servicio valida la existencia y vigencia del token.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Token de recuperación válido."
            }
            ```
        *   `400 Bad Request` o `404 Not Found`: Token inválido o expirado.

5.  **Resetear Contraseña**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/resetear-contrasena`
    *   **Descripción:** Establece una nueva contraseña para el usuario utilizando un token de recuperación válido.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "token": "token_de_recuperacion_aqui",
          "nuevaContrasena": "nuevaPassword123",
          "confirmarNuevaContrasena": "nuevaPassword123"
        }
        ```
    *   **Validaciones:**
        *   Token: obligatorio.
        *   Nueva Contraseña: obligatoria, mín. 8 caracteres.
        *   Confirmar Nueva Contraseña: debe coincidir con la nueva contraseña.
    *   **Permisos Requeridos:** Ninguno (ruta pública).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Contraseña actualizada exitosamente. Ya puedes iniciar sesión con tu nueva contraseña."
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. contraseñas no coinciden, token inválido).
        *   `404 Not Found`: Token no encontrado o inválido.

6.  **Cerrar Sesión**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/auth/logout`
    *   **Descripción:** Invalida la sesión del servidor (si se usa `express-session`). Para JWT stateless, es principalmente una acción del lado del cliente (eliminar el token).
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Validaciones:** Ninguna específica.
    *   **Permisos Requeridos:** Puede requerir autenticación si se invalida una sesión activa del servidor.
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Sesión cerrada exitosamente." // o "Logout procesado (el cliente debe eliminar el token JWT)."
            }
            ```
        *   `500 Internal Server Error`: Si hay problemas al destruir la sesión del servidor.

### Rol

Este módulo se encarga de la gestión de roles de usuario y los permisos asociados a cada rol.

#### Modelo de Datos Asociado

1.  **`Rol`**
    *   **Tabla SQL:** `rol`
    *   **Campos Principales:**
        *   `idRol` (INTEGER, PK, autoIncrement, `id_rol`)
        *   `nombre` (STRING(50), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `hasMany(models.Usuario, { foreignKey: 'idRol', as: 'usuarios' })`
        *   `belongsToMany(models.Permisos, { through: 'permisos_x_rol', foreignKey: 'id_rol', otherKey: 'id_permiso', as: 'permisos' })`

#### Endpoints

1.  **Crear Nuevo Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Crea un nuevo rol en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre del Rol",
          "descripcion": "Descripción detallada del rol (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-100 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Rol creado exitosamente.",
              "data": { /* ...datos del rol creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, tipo de dato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

2.  **Listar Roles**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/`
    *   **Descripción:** Obtiene una lista de todos los roles. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por roles activos (`true`) o inactivos (`false`).
    *   **Validaciones:** Ninguna específica para los parámetros de consulta más allá del tipo implícito.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de roles... */ ]
            }
            ```
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.

3.  **Obtener Rol por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Obtiene un rol específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del rol... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

4.  **Actualizar Rol**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Actualiza un rol existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre del Rol", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-100 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol actualizado exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del rol ya existe.

5.  **Cambiar Estado de Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del rol ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del rol actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

6.  **Anular Rol (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/anular`
    *   **Descripción:** Deshabilita un rol (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del rol actualizado con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

7.  **Habilitar Rol**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/roles/:idRol/habilitar`
    *   **Descripción:** Habilita un rol (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Rol habilitado exitosamente.",
              "data": { /* ...datos del rol actualizado con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_GESTIONAR`.
        *   `404 Not Found`: Rol no encontrado.

8.  **Eliminar Rol Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol`
    *   **Descripción:** Elimina físicamente un rol de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_GESTIONAR` (o un permiso más específico y restrictivo si se define).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito, sin contenido en la respuesta.
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.
        *   `404 Not Found`: Rol no encontrado.
        *   `409 Conflict`: Si el rol no puede ser eliminado debido a restricciones (ej. usuarios asignados a este rol).

9.  **Listar Permisos de un Rol**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Obtiene la lista de permisos asociados a un rol específico.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos asociados al rol... */ ]
            }
            ```
        *   `400 Bad Request`: ID de rol inválido.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

10. **Asignar Permisos a Rol**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Asigna uno o más permisos a un rol. Si el rol ya tiene algunos de los permisos, no se duplican. Los permisos no incluidos en la solicitud no se eliminan.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2, 5] // Array de IDs de permisos a asignar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos asignados/actualizados para el rol ID X.",
              "data": { /* ...lista de todos los permisos del rol después de la asignación... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. IDs no válidos, array vacío).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol o alguno de los permisos no encontrado.

11. **Quitar Permisos de Rol**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/roles/:idRol/permisos`
    *   **Descripción:** Quita uno o más permisos de un rol.
    *   **Parámetros de Solicitud (`params`):**
        *   `idRol` (INTEGER): ID del rol.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idPermisos": [1, 2] // Array de IDs de permisos a quitar
        }
        ```
    *   **Validaciones:**
        *   `idRol`: debe ser un entero positivo.
        *   `idPermisos`: obligatorio, array de enteros positivos, al menos un elemento.
    *   **Permisos Requeridos:** `MODULO_ROLES_ASIGNAR_PERMISOS`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permisos quitados del rol ID X.",
              "data": { /* ...lista de permisos restantes del rol... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso `MODULO_ROLES_ASIGNAR_PERMISOS`.
        *   `404 Not Found`: Rol no encontrado.

### Permisos

Este módulo administra los permisos individuales que pueden ser asignados a los roles. Los permisos definen acciones específicas que un usuario puede realizar en el sistema.

#### Modelo de Datos Asociado

1.  **`Permisos`**
    *   **Tabla SQL:** `permisos`
    *   **Campos Principales:**
        *   `idPermiso` (INTEGER, PK, autoIncrement, `id_permiso`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Rol, { through: 'permisos_x_rol', foreignKey: 'id_permiso', otherKey: 'id_rol', as: 'roles' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PERMISOS_GESTIONAR`.

1.  **Crear Nuevo Permiso**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Crea un nuevo permiso en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NOMBRE_DEL_PERMISO_EN_MAYUSCULAS",
          "descripcion": "Descripción detallada del permiso (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-150 caracteres, único. Usualmente en formato `MODULO_ENTIDAD_ACCION`.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Permiso creado exitosamente.",
              "data": { /* ...datos del permiso creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Permisos**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/`
    *   **Descripción:** Obtiene una lista de todos los permisos. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por permisos activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de permisos... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Permiso por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Obtiene un permiso específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del permiso... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

4.  **Actualizar Permiso**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Actualiza un permiso existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "NUEVO_NOMBRE_PERMISO", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `nombre`: opcional, string, 3-150 caracteres, único si se proporciona.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso actualizado exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el nuevo nombre del permiso ya existe.

5.  **Cambiar Estado de Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un permiso.
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idPermiso`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del permiso ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del permiso actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

6.  **Anular Permiso (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/anular`
    *   **Descripción:** Deshabilita un permiso (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del permiso con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

7.  **Habilitar Permiso**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/permisos/:idPermiso/habilitar`
    *   **Descripción:** Habilita un permiso (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Permiso habilitado exitosamente.",
              "data": { /* ...datos del permiso con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.

8.  **Eliminar Permiso Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/permisos/:idPermiso`
    *   **Descripción:** Elimina físicamente un permiso de la base de datos. ¡Usar con precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idPermiso` (INTEGER): ID del permiso.
    *   **Permisos Requeridos:** `MODULO_PERMISOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de permiso inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Permiso no encontrado.
        *   `409 Conflict`: Si el permiso no puede ser eliminado (ej. está asignado a roles).

### Usuario

Este módulo es responsable de la gestión general de las cuentas de usuario, incluyendo su creación (que puede implicar la creación de un perfil de Cliente o Empleado asociado), listado, detalle, actualización y cambios de estado. La creación de usuarios a través de `/api/auth/registrar` está orientada al auto-registro de Clientes, mientras que este módulo permite a los administradores gestionar todos los tipos de usuarios.

#### Modelo de Datos Asociado

1.  **`Usuario`** (Ver descripción detallada en la sección `Auth > Modelos de Datos Asociados`)
    *   **Tabla SQL:** `usuario`
    *   **Relaciones Clave para este Módulo:**
        *   `belongsTo(models.Rol, { foreignKey: 'idRol', as: 'rol' })`
        *   `hasOne(models.Cliente, { foreignKey: 'idUsuario', as: 'clienteInfo' })`
        *   `hasOne(models.Empleado, { foreignKey: 'idUsuario', as: 'empleadoInfo' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_USUARIOS_GESTIONAR`.

1.  **Crear Nuevo Usuario (Administrativo)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Crea un nuevo usuario en el sistema, permitiendo especificar el rol y los datos del perfil asociado (Cliente o Empleado). El servicio se encarga de crear el perfil correspondiente según el `idRol` proporcionado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "nuevo.usuario@example.com",
          "contrasena": "passwordSeguro123",
          "idRol": 2, // ID del Rol (ej. 1 para Admin, 2 para Cliente, 3 para Empleado)
          "estado": true, // Opcional, por defecto true
          // Campos de perfil (dependiendo del rol, algunos serán obligatorios a nivel de servicio)
          "nombre": "NombrePerfil",
          "apellido": "ApellidoPerfil",
          "telefono": "0987654321",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: 'Cédula de Ciudadanía', 'Pasaporte', etc.
          "numeroDocumento": "987654321",
          "fechaNacimiento": "YYYY-MM-DD", // Para Cliente
          // Campos específicos de Empleado (si el idRol corresponde a un Empleado)
          "fechaContratacion": "YYYY-MM-DD",
          "salario": 50000.00,
          "cargo": "Puesto del Empleado"
        }
        ```
    *   **Validaciones:**
        *   `correo`: obligatorio, email, único.
        *   `contrasena`: obligatoria, mín. 8 caracteres.
        *   `idRol`: obligatorio, entero positivo, debe existir un Rol activo con ese ID.
        *   `estado`: opcional, boolean.
        *   Campos de perfil (`nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento`): opcionales a nivel de validador de ruta, pero el servicio puede requerirlos según el rol. `numeroDocumento` se valida como único dentro de Clientes o Empleados respectivamente.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Usuario creado exitosamente.",
              "data": { /* ...datos del usuario creado, incluyendo perfil si aplica... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. correo duplicado, rol no existe, campos de perfil inválidos).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Usuarios**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/`
    *   **Descripción:** Obtiene una lista de todos los usuarios. Permite filtrar por estado y por `idRol`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por usuarios activos (`true`) o inactivos (`false`).
        *   `idRol` (INTEGER, opcional): Filtrar por ID de Rol.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de usuarios, usualmente con información básica y de rol... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Usuario por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Obtiene un usuario específico por su ID, incluyendo su información de rol y perfil asociado (Cliente o Empleado).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del usuario, rol, y perfil (clienteInfo o empleadoInfo)... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

4.  **Actualizar Usuario**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Actualiza un usuario existente por su ID. Permite actualizar correo, contraseña (si se provee), rol, estado y campos del perfil asociado. Si `contrasena` se envía vacía, se ignora (no se actualiza).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "correo": "usuario.actualizado@example.com", // Opcional
          "contrasena": "nuevaPassword123", // Opcional, si no se envía o es "", no se actualiza
          "idRol": 2, // Opcional
          "estado": true, // Opcional
          // Campos de perfil a actualizar
          "nombre": "Nombre Actualizado",
          // ...otros campos de perfil...
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `correo`: opcional, email, único (excepto para el propio usuario).
        *   `contrasena`: opcional, mín. 8 caracteres si se provee.
        *   `idRol`: opcional, entero positivo, debe existir un Rol activo.
        *   `estado`: opcional, boolean.
        *   Campos de perfil: opcionales, con validaciones similares a la creación. `numeroDocumento` se valida como único (excepto para el propio usuario).
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario actualizado exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el nuevo correo o número de documento ya existe para otro usuario/perfil.

5.  **Cambiar Estado de Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un usuario.
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true
        }
        ```
    *   **Validaciones:**
        *   `idUsuario`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del usuario ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del usuario actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

6.  **Anular Usuario (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/anular`
    *   **Descripción:** Deshabilita un usuario (establece `estado = false`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del usuario con estado false... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

7.  **Habilitar Usuario**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/usuarios/:idUsuario/habilitar`
    *   **Descripción:** Habilita un usuario (establece `estado = true`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Usuario habilitado exitosamente.",
              "data": { /* ...datos del usuario con estado true... */ }
            }
            ```
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.

8.  **Eliminar Usuario Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/usuarios/:idUsuario`
    *   **Descripción:** Elimina físicamente un usuario y sus perfiles asociados (Cliente/Empleado) de la base de datos. ¡Usar con extrema precaución!
    *   **Parámetros de Solicitud (`params`):**
        *   `idUsuario` (INTEGER): ID del usuario.
    *   **Permisos Requeridos:** `MODULO_USUARIOS_GESTIONAR` (o un permiso más específico y restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de usuario inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Usuario no encontrado.
        *   `409 Conflict`: Si el usuario no puede ser eliminado debido a otras dependencias (ej. transacciones activas, etc., aunque el `onDelete: CASCADE` en perfiles debería manejarlos).

### Estado

Este módulo gestiona los diferentes estados que pueden tener entidades como Ventas o Citas (ej. "Pendiente", "Confirmado", "En Proceso", "Completado", "Cancelado").

#### Modelo de Datos Asociado

1.  **`Estado`**
    *   **Tabla SQL:** `estado`
    *   **Campos Principales:**
        *   `idEstado` (INTEGER, PK, autoIncrement, `id_estado`)
        *   `nombreEstado` (STRING(45), allowNull: false, unique: true, `nombre_estado`)
    *   **Relaciones Principales:**
        *   `hasMany(models.Venta, { foreignKey: 'idEstado', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEstado', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo, por defecto, requieren el permiso `MODULO_ESTADOS_GESTIONAR`. La ruta GET para listar todos los estados podría tener permisos más flexibles si se considera que esta información es menos sensible.

1.  **Crear Nuevo Estado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Crea un nuevo tipo de estado en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nombre del Estado" // Ej: "Pendiente de Pago", "Confirmada", "Cancelada por Cliente"
        }
        ```
    *   **Validaciones:**
        *   `nombreEstado`: obligatorio, string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Estado creado exitosamente.",
              "data": { /* ...datos del estado creado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado, formato incorrecto).
        *   `401 Unauthorized`: Token no provisto o inválido.
        *   `403 Forbidden`: Usuario no tiene el permiso requerido.

2.  **Listar Estados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/`
    *   **Descripción:** Obtiene una lista de todos los estados disponibles.
    *   **Parámetros de Solicitud:** Ninguno.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso de lectura más general).
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de estados... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Estado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Obtiene un estado específico por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos del estado... */ }
            }
            ```
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.

4.  **Actualizar Estado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Actualiza un estado existente por su ID.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombreEstado": "Nuevo Nombre del Estado"
        }
        ```
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
        *   `nombreEstado`: opcional (si se envía, no puede estar vacío), string, 3-45 caracteres, único.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado actualizado exitosamente.",
              "data": { /* ...datos del estado actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación o ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el nuevo `nombreEstado` ya existe.

5.  **Eliminar Estado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/estados/:idEstado`
    *   **Descripción:** Elimina físicamente un estado de la base de datos. Esta acción fallará si el estado está siendo utilizado por alguna Venta o Cita.
    *   **Parámetros de Solicitud (`params`):**
        *   `idEstado` (INTEGER): ID del estado.
    *   **Validaciones:**
        *   `idEstado`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_ESTADOS_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `400 Bad Request`: ID de estado inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Estado no encontrado.
        *   `409 Conflict`: Si el estado está en uso y no puede ser eliminado.

### Cliente

Este módulo se encarga de la gestión de los perfiles de cliente. Cada cliente está asociado a una cuenta de usuario (`Usuario`) que maneja la autenticación. Las operaciones de este módulo se centran en la información específica del perfil del cliente.

#### Modelo de Datos Asociado

1.  **`Cliente`**
    *   **Tabla SQL:** `cliente`
    *   **Campos Principales:**
        *   `idCliente` (INTEGER, PK, autoIncrement, `id_cliente`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Cliente.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'usuarioCuenta' })`
        *   `hasMany(models.Venta, { foreignKey: 'idCliente', as: 'ventas' })`
        *   `hasMany(models.Cita, { foreignKey: 'idCliente', as: 'citas' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CLIENTES_GESTIONAR`.

1.  **Crear Nuevo Cliente (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Crea un nuevo perfil de cliente y, simultáneamente, una nueva cuenta de usuario (`Usuario`) para ese cliente. El rol por defecto para el usuario creado es "Cliente".
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente
          "nombre": "Nombre Cliente",
          "apellido": "Apellido Cliente",
          "telefono": "1234567890",
          "tipoDocumento": "Cédula de Ciudadanía", // Ej: "Cédula de Extranjería", "Pasaporte"
          "numeroDocumento": "123456789",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": true, // Opcional, estado del perfil Cliente (por defecto true)
          // Campos para la Cuenta de Usuario
          "correo": "cliente@example.com", // Usado para Cliente.correo y Usuario.correo
          "contrasena": "passwordSeguro123",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (por defecto true)
        }
        ```
    *   **Validaciones:**
        *   Perfil Cliente: `nombre`, `apellido`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` debe ser único en la tabla `cliente`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en las tablas `usuario` y `cliente`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Cliente creado exitosamente.",
              "data": { /* ...datos del cliente creado y su usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. `numeroDocumento` o `correo` duplicado, campos faltantes).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Clientes**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de cliente. Permite filtrar por `estado` del perfil del cliente.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por clientes activos (`true`) o inactivos (`false`) según el campo `estado` del modelo Cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": [ /* ...lista de clientes, incluyendo información de su cuenta de usuario asociada... */ ]
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Cliente por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Obtiene un perfil de cliente específico por su `idCliente`, incluyendo la información de la cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "data": { /* ...datos completos del cliente y su cuenta de usuario asociada... */ }
            }
            ```
        *   `400 Bad Request`: ID de cliente inválido.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

4.  **Actualizar Cliente**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Actualiza un perfil de cliente existente y, opcionalmente, el correo o estado de su cuenta de usuario asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Cliente (todos opcionales)
          "nombre": "Nombre Actualizado",
          "apellido": "Apellido Actualizado",
          "telefono": "1122334455",
          "tipoDocumento": "Pasaporte",
          "numeroDocumento": "AB123456",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoCliente": false, // Estado del perfil del Cliente
          // Campos de la Cuenta de Usuario (todos opcionales)
          "correo": "nuevo.correo@example.com", // Si se actualiza, debe ser único
          "estadoUsuario": false, // Estado de la cuenta Usuario
          "idUsuario": null // Opcional: permite desvincular (null) o re-vincular un idUsuario existente y no asociado
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   Campos de perfil: opcionales, pero si se proveen, deben cumplir sus reglas (ej. `numeroDocumento` único si cambia).
        *   `correo`: opcional, si se provee debe ser email válido y único en `usuario` y `cliente` (excluyendo el registro actual).
        *   `idUsuario`: opcional, si se provee como entero debe ser un `idUsuario` válido y no asociado a otro cliente. Si es `null`, desvincula el usuario actual (si la lógica de servicio lo permite).
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente actualizado exitosamente.",
              "data": { /* ...datos del cliente y usuario actualizados... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente o `idUsuario` (si se intenta re-vincular) no encontrado.
        *   `409 Conflict`: Si `numeroDocumento` o `correo` duplicado.

5.  **Cambiar Estado de Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/estado`
    *   **Descripción:** Cambia el estado del perfil de un cliente (campo `estado` en el modelo `Cliente`). Esto no afecta directamente el estado de la cuenta de `Usuario` asociada.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "estado": false // o true, para el perfil del Cliente
        }
        ```
    *   **Validaciones:**
        *   `idCliente`: debe ser un entero positivo.
        *   `estado`: obligatorio, boolean.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Estado del cliente ID X cambiado a Y exitosamente.",
              "data": { /* ...datos del cliente actualizado... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`: Cliente no encontrado.

6.  **Anular Cliente (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/anular`
    *   **Descripción:** Deshabilita el perfil de un cliente (establece `estado = false` en `Cliente`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente anulado (deshabilitado) exitosamente.",
              "data": { /* ...datos del cliente con estado false... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

7.  **Habilitar Cliente**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/clientes/:idCliente/habilitar`
    *   **Descripción:** Habilita el perfil de un cliente (establece `estado = true` en `Cliente`).
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`:
            ```json
            {
              "success": true,
              "message": "Cliente habilitado exitosamente.",
              "data": { /* ...datos del cliente con estado true... */ }
            }
            ```
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

8.  **Eliminar Cliente Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/clientes/:idCliente`
    *   **Descripción:** Elimina físicamente un perfil de cliente. La cuenta de `Usuario` asociada NO se elimina automáticamente debido a la restricción `onDelete: 'RESTRICT'`. Se debe gestionar la eliminación del usuario por separado si es necesario, o cambiar la política de integridad.
    *   **Parámetros de Solicitud (`params`):**
        *   `idCliente` (INTEGER): ID del cliente.
    *   **Permisos Requeridos:** `MODULO_CLIENTES_GESTIONAR` (o un permiso más restrictivo).
    *   **Respuestas Comunes:**
        *   `204 No Content`: Éxito.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`: Si hay otras dependencias que impiden la eliminación (ej. Ventas, Citas asociadas que no tienen `onDelete: CASCADE` o `SET NULL` para `idCliente`).

### Empleado

Este módulo gestiona los perfiles de los empleados. Similar a los clientes, cada empleado está asociado a una cuenta de usuario (`Usuario`) para la autenticación. Este módulo maneja la información específica del perfil del empleado y sus especialidades.

#### Modelos de Datos Asociados

1.  **`Empleado`**
    *   **Tabla SQL:** `empleado`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, autoIncrement, `id_empleado`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `apellido` (STRING(100), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `tipoDocumento` (STRING(50), allowNull: false, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: false, unique: true, `numero_documento`)
        *   `fechaNacimiento` (DATEONLY, allowNull: false, `fecha_nacimiento`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true) - Estado del perfil del Empleado.
        *   `idUsuario` (INTEGER, allowNull: false, unique: true, FK a `usuario`, onDelete: 'RESTRICT')
    *   **Relaciones Principales:**
        *   `belongsTo(models.Usuario, { foreignKey: 'idUsuario', as: 'cuentaUsuario' })`
        *   `belongsToMany(models.Especialidad, { through: 'empleado_especialidad', foreignKey: 'id_empleado', otherKey: 'id_especialidad', as: 'especialidades' })`
        *   `hasMany(models.Cita, { foreignKey: 'idEmpleado', as: 'citasAtendidas' })`
        *   `hasMany(models.Abastecimiento, { foreignKey: 'idEmpleadoAsignado', as: 'abastecimientosAsignados' })`
        *   `hasMany(models.Novedades, { foreignKey: 'idEmpleado', as: 'novedadesHorario' })`

2.  **`EmpleadoEspecialidad`** (Tabla de Unión)
    *   **Tabla SQL:** `empleado_especialidad`
    *   **Campos Principales:**
        *   `idEmpleado` (INTEGER, PK, FK a `empleado`)
        *   `idEspecialidad` (INTEGER, PK, FK a `especialidad`)
    *   **Relaciones:**
        *   `belongsTo(models.Empleado, { foreignKey: 'idEmpleado' })`
        *   `belongsTo(models.Especialidad, { foreignKey: 'idEspecialidad' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_EMPLEADOS_GESTIONAR`.

1.  **Crear Nuevo Empleado (y cuenta de Usuario asociada)**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Crea un nuevo perfil de empleado y una cuenta de usuario asociada. El rol de la cuenta de usuario creada debería ser uno apropiado para empleados.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          // Campos del Perfil Empleado
          "nombre": "Nombre Empleado",
          "apellido": "Apellido Empleado",
          "telefono": "2345678901",
          "tipoDocumento": "Cédula de Ciudadanía",
          "numeroDocumento": "234567890",
          "fechaNacimiento": "YYYY-MM-DD",
          "estadoEmpleado": true, // Opcional, estado del perfil Empleado (def: true)
          // Campos para la Cuenta de Usuario
          "correo": "empleado@example.com", // Usado para Empleado.correo y Usuario.correo
          "contrasena": "passwordFuerte456",
          "estadoUsuario": true // Opcional, estado de la cuenta Usuario (def: true)
          // "idRol" para el usuario se gestiona en el servicio, asignando un rol de empleado.
        }
        ```
    *   **Validaciones:**
        *   Perfil Empleado: `nombre`, `apellido`, `correo`, `telefono`, `tipoDocumento`, `numeroDocumento`, `fechaNacimiento` son obligatorios. `numeroDocumento` y `correo` deben ser únicos en la tabla `empleado`.
        *   Cuenta Usuario: `correo` y `contrasena` son obligatorios. `correo` debe ser único en la tabla `usuario`. `contrasena` mín. 8 caracteres.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Empleado creado exitosamente.",
              "data": { /* ...datos del empleado y usuario asociado (sin contraseña)... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Empleados**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/`
    *   **Descripción:** Obtiene una lista de todos los perfiles de empleado. Permite filtrar por `estado` del perfil.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por empleados activos (`true`) o inactivos (`false`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de empleados... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Empleado por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Obtiene un perfil de empleado por `idEmpleado`, incluyendo cuenta de usuario y especialidades.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos del empleado, usuario y especialidades... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Empleado**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Actualiza un perfil de empleado y, opcionalmente, el correo/estado de su cuenta de usuario.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales similares a la creación, ej. `nombre`, `apellido`, `correo`, `telefono`, `estadoEmpleado`, `estadoUsuario`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Empleado actualizado.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`.

5.  **Cambiar Estado de Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/estado`
    *   **Descripción:** Cambia el estado del perfil de un empleado.
    *   **Parámetros de Solicitud (`params`):** `idEmpleado` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado del empleado cambiado.", "data": { /* ...empleado actualizado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Empleado (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/anular`
    *   **Descripción:** Establece `estado = false` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Empleado**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/empleados/:idEmpleado/habilitar`
    *   **Descripción:** Establece `estado = true` en el perfil del Empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Empleado Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado`
    *   **Descripción:** Elimina el perfil del empleado. La cuenta de `Usuario` no se elimina (por `onDelete: 'RESTRICT'`).
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `401`, `403`, `404`, `409`.

9.  **Listar Especialidades de Empleado**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Obtiene todas las especialidades asociadas a un empleado.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

10. **Asignar Especialidades a Empleado**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Asigna una o más especialidades a un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2, 3] // Array de IDs de especialidades
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades asignadas.", "data": { /* ...especialidades actualizadas del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado o alguna Especialidad no encontrada).

11. **Quitar Especialidades de Empleado**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/empleados/:idEmpleado/especialidades`
    *   **Descripción:** Quita una o más especialidades de un empleado.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "idEspecialidades": [1, 2] // Array de IDs de especialidades a quitar
        }
        ```
    *   **Validaciones:** `idEspecialidades` debe ser un array de enteros positivos.
    *   **Permisos Requeridos:** `MODULO_EMPLEADOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidades quitadas.", "data": { /* ...especialidades restantes del empleado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found` (Empleado no encontrado).

### Especialidad

Este módulo gestiona las especialidades que pueden ser asignadas a los empleados y que también pueden estar asociadas a los servicios ofrecidos.

#### Modelo de Datos Asociado

1.  **`Especialidad`**
    *   **Tabla SQL:** `especialidad`
    *   **Campos Principales:**
        *   `idEspecialidad` (INTEGER, PK, autoIncrement, `id_especialidad`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `belongsToMany(models.Empleado, { through: 'empleado_especialidad', foreignKey: 'id_especialidad', otherKey: 'id_empleado', as: 'empleados' })`
        *   `hasMany(models.Servicio, { foreignKey: 'idEspecialidad', as: 'servicios' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_ESPECIALIDADES_GESTIONAR`.

1.  **Crear Nueva Especialidad**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Crea una nueva especialidad en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre de la Especialidad", // Ej: "Cardiología", "Estilista Canino"
          "descripcion": "Descripción detallada de la especialidad (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 255 caracteres.
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`:
            ```json
            {
              "success": true,
              "message": "Especialidad creada exitosamente.",
              "data": { /* ...datos de la especialidad creada... */ }
            }
            ```
        *   `400 Bad Request`: Error de validación (ej. nombre duplicado).
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

2.  **Listar Especialidades**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/`
    *   **Descripción:** Obtiene una lista de todas las especialidades. Permite filtrar por estado.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por especialidades activas (`true`) o inactivas (`false`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de especialidades... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Especialidad por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Obtiene una especialidad específica por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos de la especialidad... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Especialidad**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Actualiza una especialidad existente por su ID.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nuevo Nombre Especialidad", // Opcional
          "descripcion": "Nueva descripción (opcional)", // Opcional
          "estado": false // Opcional
        }
        ```
    *   **Validaciones:** Campos opcionales, pero si se proveen deben cumplir las reglas (ej. `nombre` único y longitud).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Especialidad actualizada.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si `nombre` duplicado).

5.  **Cambiar Estado de Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de una especialidad.
    *   **Parámetros de Solicitud (`params`):** `idEspecialidad` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado de la especialidad cambiado.", "data": { /* ...especialidad actualizada... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Especialidad (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/anular`
    *   **Descripción:** Establece `estado = false` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Especialidad**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/especialidades/:idEspecialidad/habilitar`
    *   **Descripción:** Establece `estado = true` para una especialidad.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Especialidad Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/especialidades/:idEspecialidad`
    *   **Descripción:** Elimina físicamente una especialidad. El servicio debe verificar que no esté en uso por Empleados o Servicios.
    *   **Permisos Requeridos:** `MODULO_ESPECIALIDADES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `204 No Content`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si está en uso).

### Proveedor

Este módulo se encarga de la gestión de proveedores de productos o servicios para la empresa.

#### Modelo de Datos Asociado

1.  **`Proveedor`**
    *   **Tabla SQL:** `proveedor`
    *   **Campos Principales:**
        *   `idProveedor` (INTEGER, PK, autoIncrement, `id_proveedor`)
        *   `nombre` (STRING(100), allowNull: false)
        *   `tipo` (STRING(50), allowNull: false) - Ej: "Natural", "Jurídico".
        *   `tipoDocumento` (STRING(50), allowNull: true, `tipo_documento`)
        *   `numeroDocumento` (STRING(45), allowNull: true, `numero_documento`)
        *   `nitEmpresa` (STRING(45), allowNull: true, unique: true, `nit_empresa`)
        *   `telefono` (STRING(20), allowNull: false)
        *   `correo` (STRING(100), allowNull: false, unique: true, `validate: { isEmail: true }`)
        *   `direccion` (TEXT, allowNull: false)
        *   `nombrePersonaEncargada` (STRING(100), allowNull: true, `nombre_persona_encargada`)
        *   `telefonoPersonaEncargada` (STRING(20), allowNull: true, `telefono_persona_encargada`)
        *   `emailPersonaEncargada` (STRING(100), allowNull: true, `validate: { isEmail: true }`, `email_persona_encargada`)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Índices:**
        *   Unique en (`nombre`, `tipo`)
    *   **Relaciones Principales:**
        *   `hasMany(models.Compra, { foreignKey: 'idProveedor', as: 'compras' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_PROVEEDORES_GESTIONAR`.

1.  **Crear Nuevo Proveedor**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/proveedores/`
    *   **Descripción:** Crea un nuevo proveedor en el sistema.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Nombre del Proveedor S.A.S.",
          "tipo": "Jurídico", // o "Natural"
          "telefono": "3001234567",
          "correo": "contacto@proveedor.com",
          "direccion": "Calle Falsa 123, Ciudad",
          "tipoDocumento": "NIT", // Opcional si es "Natural", ej: "Cédula de Ciudadanía"
          "numeroDocumento": null, // Opcional si es "Jurídico"
          "nitEmpresa": "900123456-7", // Opcional si es "Natural", único
          "nombrePersonaEncargada": "Juan Encargado (opcional)",
          "telefonoPersonaEncargada": "3109876543 (opcional)",
          "emailPersonaEncargada": "juan.encargado@proveedor.com (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`, `tipo`, `telefono`, `correo`, `direccion` son obligatorios.
        *   `correo` y `nitEmpresa` (si se proporciona) deben ser únicos.
        *   Los campos de persona encargada son opcionales.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Proveedor creado.", "data": { /* ...datos del proveedor... */ }}`
        *   `400 Bad Request`: Error de validación.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `409 Conflict` (si `correo` o `nitEmpresa` ya existen).

2.  **Listar Proveedores**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/proveedores/`
    *   **Descripción:** Obtiene una lista de proveedores. Permite filtrar por `estado` y `tipo`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional): Filtrar por proveedores activos (`true`) o inactivos (`false`).
        *   `tipo` (STRING, opcional): Filtrar por tipo de proveedor (ej. "Natural", "Jurídico").
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": [/* ...lista de proveedores... */]}`
        *   `401 Unauthorized`.
        *   `403 Forbidden`.

3.  **Obtener Proveedor por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Obtiene un proveedor por su ID.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "data": { /* ...datos del proveedor... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

4.  **Actualizar Proveedor**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Actualiza un proveedor por su ID.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales similares a la creación).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Proveedor actualizado.", "data": { /* ...datos actualizados... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict`.

5.  **Cambiar Estado de Proveedor**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/estado`
    *   **Descripción:** Cambia el estado (activo/inactivo) de un proveedor.
    *   **Parámetros de Solicitud (`params`):** `idProveedor` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}` (o `true`).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `200 OK`: `{"success": true, "message": "Estado del proveedor cambiado.", "data": { /* ...proveedor actualizado... */ }}`
        *   `400 Bad Request`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.

6.  **Anular Proveedor (Borrado Lógico)**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/anular`
    *   **Descripción:** Establece `estado = false` para un proveedor.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

7.  **Habilitar Proveedor**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/proveedores/:idProveedor/habilitar`
    *   **Descripción:** Establece `estado = true` para un proveedor.
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`, `404`.

8.  **Eliminar Proveedor Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/proveedores/:idProveedor`
    *   **Descripción:** Elimina físicamente un proveedor. El servicio debe verificar que no esté en uso (ej. en Compras).
    *   **Permisos Requeridos:** `MODULO_PROVEEDORES_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `204 No Content`.
        *   `401 Unauthorized`.
        *   `403 Forbidden`.
        *   `404 Not Found`.
        *   `409 Conflict` (si está en uso).

### CategoriaProducto

Este módulo administra las categorías para los productos, permitiendo agruparlos y definir propiedades comunes como la vida útil y el tipo de uso.

#### Modelo de Datos Asociado

1.  **`CategoriaProducto`**
    *   **Tabla SQL:** `categoria_producto`
    *   **Campos Principales:**
        *   `idCategoriaProducto` (INTEGER, PK, autoIncrement, `id_categoria_producto`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
        *   `vidaUtilDias` (INTEGER, allowNull: true, `vida_util_dias`) - Vida útil estimada en días.
        *   `tipoUso` (STRING(10), allowNull: false, `validate: { isIn: [["Interno", "Externo"]] }`) - Define si el producto es para uso "Interno" (consumido en la empresa) o "Externo" (para la venta).
    *   **Relaciones Principales:**
        *   `hasMany(models.Producto, { foreignKey: 'categoriaProductoId', as: 'productos' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.

1.  **Crear Nueva Categoría de Producto**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/categorias-producto/`
    *   **Descripción:** Crea una nueva categoría para productos.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Shampoos Caninos",
          "descripcion": "Categoría para shampoos de uso veterinario en caninos (opcional)",
          "vidaUtilDias": 730, // Opcional
          "tipoUso": "Externo", // "Interno" o "Externo"
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 45 caracteres (revisar si el modelo es TEXT y el validador es 45).
        *   `vidaUtilDias`: opcional, entero no negativo.
        *   `tipoUso`: obligatorio, debe ser "Interno" o "Externo".
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Categoría de producto creada.", "data": { /* ...datos... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `409 Conflict`.

2.  **Listar Categorías de Producto**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-producto/`
    *   **Descripción:** Obtiene una lista de categorías de producto. Permite filtrar por `estado` y `tipoUso`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
        *   `tipoUso` (STRING, opcional): "Interno" o "Externo".
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Categoría de Producto por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Categoría de Producto**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`, `409`.

5.  **Cambiar Estado de Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/estado`
    *   **Parámetros de Solicitud (`params`):** `idCategoria` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}`.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/anular`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Categoría de Producto**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-producto/:idCategoria/habilitar`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Categoría de Producto Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/categorias-producto/:idCategoria`
    *   **Descripción:** Elimina físicamente. El servicio debe validar que no esté en uso por Productos.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_PRODUCTOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`, `409`.

---

### CategoriaServicio

Este módulo administra las categorías para los servicios ofrecidos por la empresa.

#### Modelo de Datos Asociado

1.  **`CategoriaServicio`**
    *   **Tabla SQL:** `categoria_servicio`
    *   **Campos Principales:**
        *   `idCategoriaServicio` (INTEGER, PK, autoIncrement, `id_categoria_servicio`)
        *   `nombre` (STRING(100), allowNull: false, unique: true)
        *   `descripcion` (TEXT, allowNull: true)
        *   `estado` (BOOLEAN, allowNull: false, defaultValue: true)
    *   **Relaciones Principales:**
        *   `hasMany(models.Servicio, { foreignKey: 'idCategoriaServicio', as: 'servicios' })`

#### Endpoints

Todos los endpoints de este módulo requieren el permiso `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.

1.  **Crear Nueva Categoría de Servicio**
    *   **Método HTTP:** `POST`
    *   **Path:** `/api/categorias-servicio/`
    *   **Descripción:** Crea una nueva categoría para servicios.
    *   **Parámetros de Solicitud (`body`):**
        ```json
        {
          "nombre": "Peluquería Canina",
          "descripcion": "Servicios de estética y peluquería para perros (opcional)",
          "estado": true // Opcional, por defecto true
        }
        ```
    *   **Validaciones:**
        *   `nombre`: obligatorio, string, 3-45 caracteres, único.
        *   `descripcion`: opcional, string, máx 45 caracteres (revisar si el modelo es TEXT y el validador es 45).
        *   `estado`: opcional, boolean.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:**
        *   `201 Created`: `{"success": true, "message": "Categoría de servicio creada.", "data": { /* ...datos... */ }}`
        *   `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `409 Conflict`.

2.  **Listar Categorías de Servicio**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-servicio/`
    *   **Descripción:** Obtiene una lista de categorías de servicio. Permite filtrar por `estado`.
    *   **Parámetros de Solicitud (`query`):**
        *   `estado` (BOOLEAN, opcional).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `401`, `403`.

3.  **Obtener Categoría de Servicio por ID**
    *   **Método HTTP:** `GET`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

4.  **Actualizar Categoría de Servicio**
    *   **Método HTTP:** `PUT`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** (Campos opcionales como en la creación).
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`, `409`.

5.  **Cambiar Estado de Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/estado`
    *   **Parámetros de Solicitud (`params`):** `idCategoriaServicio` (INTEGER).
    *   **Parámetros de Solicitud (`body`):** `{"estado": false}`.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

6.  **Anular Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/anular`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

7.  **Habilitar Categoría de Servicio**
    *   **Método HTTP:** `PATCH`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio/habilitar`
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `200 OK`, `400`, `401`, `403`, `404`.

8.  **Eliminar Categoría de Servicio Físicamente**
    *   **Método HTTP:** `DELETE`
    *   **Path:** `/api/categorias-servicio/:idCategoriaServicio`
    *   **Descripción:** Elimina físicamente. El servicio debe validar que no esté en uso por Servicios.
    *   **Permisos Requeridos:** `MODULO_CATEGORIAS_SERVICIOS_GESTIONAR`.
    *   **Respuestas Comunes:** `204 No Content`, `400`, `401`, `403`, `404`, `409`.
